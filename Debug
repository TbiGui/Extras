
repeat
	task.wait()
until game:IsLoaded()

if not game:IsLoaded() then
	game.Loaded:Wait()
end

if game.PlaceId ~= 920587237 then
	return
end

local AdoptMeConfigs = loadstring(game:HttpGet('https://raw.githubusercontent.com/TbiGui/Extras/refs/heads/main/Gui'))()
local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local interiorsM = require(game:GetService("ReplicatedStorage").ClientModules.Core.InteriorsM.InteriorsM)

local LocalPlayer = game.Players.LocalPlayer
local runService = game:GetService("RunService")
local virtualUser = game:service("VirtualUser")
local HttpService = game:GetService("HttpService")

local getiden = getthreadidentity or getidentity
local setiden = setthreadidentity or setidentity

local Window = Rayfield:CreateWindow({
	Name = "TbiGui Window - Beta",
	Icon = 116531676650470, 
	LoadingTitle = "TbiGui Interface",
	LoadingSubtitle = "by tbi",
	Theme = "Default",

	DisableRayfieldPrompts = true,
	DisableBuildWarnings = false,

	ConfigurationSaving = {
		Enabled = true,
		FolderName = "TBIGUISAVECONFIGS",
		FileName = "TBIGUISAVES"
	},
})

function Notification(Text)
	Rayfield:Notify({
		Title = "Error",
		Content = Text,
		Duration = 3,
		Image = nil,
	})
end

function InfoNotification(Text)
	Rayfield:Notify({
		Title = "Info",
		Content = Text,
		Duration = 3,
		Image = nil,
	})
end

local FurnitureCosts = {
	["basiccrib"] = 5,
	["lures_2023_normal_lure"] = 750,
	["stylishshower"] = 13,
	["ailments_refresh_2024_cheap_water_bowl"] = 7,
	["ailments_refresh_2024_cheap_food_bowl"] = 7,
	["toilet"] = 9,
}

AilmentsClientRe = require(game:GetService("ReplicatedStorage").new.modules.Ailments.AilmentsClient)

local TbiConf = 1

local DisabledAilments = {}
local PlayerPetsTabel = {}
local PlayersPets = {}
local FirstSelectedPet = "None"
local SecondSelectedPet = "None"

local SelectedAgepet = "None"
local SelectedFood = "pet_age_potion"
local ChangeAgePet = false

local AutoLure = false
local AutoLureRunning = false
local NextLureUpdate = tick()

local WebhookIntervalTick = tick()
local WebhookInterval = 300
local DcWebhook = ""
local SendWebhook = false
local RequestTypes = request or syn.request

local Antiafk = true
local DebugMessages = false

local TickDelay = 2
local OldTick = tick()

local discordlink = "https://discord.gg/TFUD4S7z6q"
local fsetclipboard = setclipboard or toclipboard

local platformActive = false
local platformSize = Vector3.new(200, 2, 200)
local platformColor = Color3.new(0.231373, 0.231373, 0.231373)
local platform = nil

local isRunning = false 
local radius = 50
local speed = 2
local angle = 0
local jumpInterval = 1

local TotalMoneyFarmed = 0
local OldPlayerMoney = 0
local TotalAgePotionFarmed = 0
local OldPlayerAgePotion = 0

local AutoFarmFunctions = {
	["PetAutofarm"] = {
		State = false,
		Running = false
	},
	["AgePotionFarm"] = {
		State = false,
		Running = false
	},
	["AutoHatchEggs"] = {
		State = false,
		Running = false
	},
	["AutoGiveAgePotions"] = {
		State = false,
		Running = false
	}
}

local ExtraFunctions = {
	["SwitchOutPets"] = false,
	["FarmAllPets"] = false,
	["SwitchOutEggs"] = false,
	["HatchAllEggs"] = false,
}

local TransferMoneyFunctions = {
	["TransferBucksWithCashRegister"] = false,
	["TransferBucksWithMannequin"] = false,
}

local AllAilments = {
	"hungry",
	"thirsty",
	"sleepy",
	"dirty",
	"toilet",
	"sick",
	"play",
	"ride",
	"salon",
	"bored",
	"camping",
	"beach_party",
	"pizza_party",
	"school",
	"walk",
	"pet_me"
}

local DoMysteryPetNeedVal = true
local DoBabyAutoFarm = false
local PerformanceMode = false
local DisableInfo = false

local SendToRegister = ""
local SendToRegisterPlayer = ""
local AmountToRegister = 50
local DisableDialogSetting = false

local DashboardTab = Window:CreateTab("Dashboard", "layout-dashboard")
local DebugSection = DashboardTab:CreateSection("Debug")

local InfoMainLabel = DashboardTab:CreateLabel("Loading...", "info", nil, false)
local PrintDebugToggle = DashboardTab:CreateToggle({
	Name = "Print debug messages",
	CurrentValue = false,
	Flag = nil,
	Callback = function(Value)
		DebugMessages = Value
	end,
})

local FurnituresSection = DashboardTab:CreateSection("Furnitures")

local LureIdMainLabel = DashboardTab:CreateLabel("Lure: loading...", "package-open", nil, false)
local BedIdMainLabel = DashboardTab:CreateLabel("Bed: loading...", "bed", nil, false)
local ShowerIdMainLabel = DashboardTab:CreateLabel("Shower: loading...", "shower-head", nil, false)
local WaterIdMainLabel = DashboardTab:CreateLabel("Water bowl: loading...", "glass-water", nil, false)
local FoodIdMainLabel = DashboardTab:CreateLabel("Food bowl: loading...", "apple", nil, false)
local ToiletIdMainLabel = DashboardTab:CreateLabel("toilet: loading...", "waves", nil, false)

local InfosSection = DashboardTab:CreateSection("Infos")

local HasCertificateMainLabel = DashboardTab:CreateLabel("Has certificate: loading...", "scroll", nil, false)
local LureId = nil
local BedId = nil
local ShowerId = nil
local WaterBowlId = nil
local FoodBowlId = nil
local ToiletId = nil
task.wait(2)



function LoadPlayerStuff()
	if LocalPlayer.PlayerGui.AssetLoadUI.Enabled then
		repeat
			task.wait()
		until not LocalPlayer.PlayerGui.AssetLoadUI.Enabled and LocalPlayer.PlayerGui.NewsApp.Enabled
		task.wait(0.5)
	end

	local function fireButton(button)
		local success, errorMessage = pcall(function()
			firesignal(button.MouseButton1Down)
			task.wait(1)
			firesignal(button.MouseButton1Click)
			task.wait(1)
		end)

		if not success then
			warn("Something went wrong while clicking play button: " .. errorMessage)
		end
	end

	if LocalPlayer.PlayerGui.NewsApp.Enabled then
		local AbsPlay = LocalPlayer.PlayerGui.NewsApp
			:WaitForChild("EnclosingFrame")
			:WaitForChild("MainFrame")
			:WaitForChild("Contents")
			:WaitForChild("PlayButton")
		fireButton(AbsPlay)
	end

	if getgenv().TbiConfigs then
		for i = 1, #getgenv().TbiConfigs + 1 do
			if getgenv().TbiConfigs[i] == nil then
				getgenv().TbiConfigs[i] = {State = true}
				TbiConf = i
				break
			else
				getgenv().TbiConfigs[i].State = false
			end
		end
	else
		getgenv().TbiConfigs = { [1] = {State = true} }
	end
	
	local function TeleportPlayerToHouse()
		local oldiden = getiden()
		setiden(2)
		task.spawn(interiorsM.enter, "housing", "", {["house_owner"] = LocalPlayer})
		setiden(oldiden)
	end

	local function BuyFurniture(furniture, CFramePos)
		if AdoptMeConfigs.GetPlayerMoney() < FurnitureCosts[furniture] then
			InfoMainLabel:Set("Not enough bucks to buy ("..furniture.."), costs: " .. FurnitureCosts[furniture], "info", nil, false)
			task.wait(1)
			return
		end
		local oldiden = getiden()
		setiden(2)
		AdoptMeConfigs.RunRouterClient(false, "HousingAPI/BuyFurnitures", {
			{ { ["properties"] = { ["cframe"] = CFramePos }, ["kind"] = furniture } }
		})
		setiden(oldiden)
	end

	if AdoptMeConfigs.GetCurrentInterior() ~= "housing" then
		TeleportPlayerToHouse()
		local status = tick()
		repeat task.wait() until AdoptMeConfigs.GetCurrentInterior() == "housing" or (tick() - status > 10)
		task.wait(3)
	end

	local function CheckAndBuyFurniture(name, configName, position, label, configId, icon)
		InfoMainLabel:Set("Checking for " .. name, "info", nil, false)
		local furniture = AdoptMeConfigs.GetFurniture(configName)

		if furniture then
			InfoMainLabel:Set(name .. " found", "info", nil, false)
			label:Set(name .. ": found (" .. tostring(furniture) .. ")", icon, nil, false)
			return furniture
		else
			InfoMainLabel:Set(name .. " not found", "info", nil, false)
			label:Set(name .. ": not found", icon, nil, false)
			task.wait(0.5)
			InfoMainLabel:Set("Buying " .. name, "info", nil, false)
			BuyFurniture(configId, position)
			task.wait(0.2)

			local newFurniture = AdoptMeConfigs.GetFurniture(configName)
			if newFurniture then
				InfoMainLabel:Set(name .. " found", "info", nil, false)
				label:Set(name .. ": found (" .. tostring(newFurniture) .. ")", icon, nil, false)
				return newFurniture
			else
				InfoMainLabel:Set(name .. " not found", "info", nil, false)
				label:Set(name .. ": not found", icon, nil, false)
				return nil
			end
		end
	end
	
	LureId = CheckAndBuyFurniture("Lure", "Lures2023NormalLure", CFrame.new(21, 0, -8), LureIdMainLabel, "lures_2023_normal_lure", "package-open")
	BedId = CheckAndBuyFurniture("Bed", "BasicCrib", CFrame.new(5, 0, -24.5), BedIdMainLabel, "basiccrib", "bed")
	ShowerId = CheckAndBuyFurniture("Shower", "StylishShower", CFrame.new(5.5, 0, -29.5, -1, 0, 0, 0, 1, 0, 0, 0, -1), ShowerIdMainLabel, "stylishshower", "shower-head")
	WaterBowlId = CheckAndBuyFurniture("Water bowl", "AilmentsRefresh2024CheapWaterBowl", CFrame.new(8, 0, -25, 0, 0, 1, 0, 1, -0, -1, 0, 0), WaterIdMainLabel, "ailments_refresh_2024_cheap_water_bowl", "glass-water")
	FoodBowlId = CheckAndBuyFurniture("Food bowl", "AilmentsRefresh2024CheapFoodBowl", CFrame.new(8, 0, -27, 0, 0, 1, 0, 1, -0, -1, 0, 0), FoodIdMainLabel, "ailments_refresh_2024_cheap_food_bowl", "apple")
	ToiletId = CheckAndBuyFurniture("Toilet", "Toilet", CFrame.new(5.5, 0, -19, -1, 0, 0, 0, 1, 0, 0, 0, -1), ToiletIdMainLabel, "waves")
	task.wait(1)
	
	InfoMainLabel:Set("Checking if player has pet certificate", "info", nil, false)
	
local HasCert = "error"
	local s,e = pcall(function()
		local oldiden = getiden()
		setiden(2)
		if AdoptMeConfigs.GetCertificate() then
			HasCert = "yes"
		else
			HasCert = "no"
		end
		setiden(oldiden)
	end)
	HasCertificateMainLabel:Set("Has certificate: " .. HasCert, "scroll", nil, false)
	InfoMainLabel:Set("Everything loaded!", "info", nil, false)
	
	
end
LoadPlayerStuff()
local MainTab = Window:CreateTab("Main", "monitor")
local MainSection = MainTab:CreateSection("Main")
local AutofarmTab = Window:CreateTab("Autofarm", "mouse-pointer")
local AutofarmSettingSection = AutofarmTab:CreateSection("Info")
local InfoMoneyLabel = AutofarmTab:CreateLabel("You earned: 0 Bucks", "circle-dollar-sign", nil, false)
local InfoAgePotionLabel = AutofarmTab:CreateLabel("You farmed: 0 Age Potions", "cup-soda", nil, false)
local BucksTab = Window:CreateTab("Transfer", "hand-coins")
local ExtrasTab = Window:CreateTab("Extras", "wrench")
local MiscTab = Window:CreateTab("Misc", "circle-ellipsis")


local S, e = pcall(function()
	OldPlayerMoney = AdoptMeConfigs.GetPlayerMoney()
	local PlayerInv = AdoptMeConfigs.GetPlayersInventory()
	local count = 0
	local PlayerInventoryFood = PlayerInv.food
	for i,v in pairs(PlayerInventoryFood) do
		if v.kind == "pet_age_potion" then
			count = count + 1
		end
	end
	OldPlayerAgePotion = count
end)

function IsOtherAutofarmOn(Ignore)
	for i,v in pairs(AutoFarmFunctions) do
		if i ~= Ignore then
			if v.State then
				return true
			end
		end
	end
	return false
end

function CheckIfOtherExtra(IgnoreAutofarm)
	for i,v in pairs(ExtraFunctions) do
		task.wait()
		if i ~= IgnoreAutofarm and v == true then
			Notification("Please turn off (" .. i .. ") to be able to use this one!")
			return true
		end
	end

	return false
end

function CheckIfOtherTransfer(IgnoreAutofarm)
	for i,v in pairs(TransferMoneyFunctions) do
		task.wait()
		if i ~= IgnoreAutofarm and v == true then
			Notification("Please turn off (" .. i .. ") to be able to use this one!")
			return true
		end
	end

	return false
end

function GetActivAutofarm()
	for i,v in pairs(AutoFarmFunctions) do
		if v.State then
			return i
		end
	end
	return ""
end

function SendNothicationToWebhook()
	local PlayerMoney = AdoptMeConfigs.GetPlayerMoney()
	local PlayerPotion = AdoptMeConfigs.GetPlayerPotionAmount()
	local embed = {
		title = "Notification from TbiGui (" .. LocalPlayer.Name .. ")",
		color = 5814783,
		fields = {
			{
				name = "Bucks:",
				value = "```" .. TotalMoneyFarmed .. " earned, Total: " .. PlayerMoney .. "```",
				inline = false
			},
			{
				name = "Potions:",
				value = "```" .. TotalAgePotionFarmed .. " farmed, Total: " .. PlayerPotion .. "```",
				inline = false
			},
		}
	}

	local data = {
		content = "@everyone",
		embeds = { embed }
	}

	local response = RequestTypes({
		Url = DcWebhook,
		Method = "POST",
		Headers = {
			["Content-Type"] = "application/json"
		},
		Body = HttpService:JSONEncode(data)
	})
end

function DoMysteryPetNeed()
	local Success, err = pcall(function()
		local oldiden = getiden()
		setiden(2)
		local LegacyLoad = require(game.ReplicatedStorage.new.modules.LegacyLoad)
		local LegacyLoad_Inventory = LegacyLoad("InventoryDB")
		setiden(oldiden)
	end)

	if not Success then
		task.wait(0.2)
		DoMysteryPetNeedToggle:Set(false)
		DoMysteryPetNeedVal = false
		Notification("Your executer doesnt support mystery pet need or the version is too old")
	else
		DoMysteryPetNeedVal = true
	end
end

function updatePlatformForLocalPlayer()
	if not LocalPlayer or not LocalPlayer.Character or not LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
		return
	end

	local rootPart = LocalPlayer.Character.HumanoidRootPart

	if workspace:FindFirstChild("PlayerPlatform") then
		platform = workspace:FindFirstChild("PlayerPlatform")
	end

	if not platform and not workspace:FindFirstChild("PlayerPlatform") then
		platform = Instance.new("Part")
		platform.Size = platformSize
		platform.Color = platformColor
		platform.Anchored = true
		platform.CanCollide = true
		platform.Name = "PlayerPlatform"
		platform.Parent = workspace
	end

	if math.abs(platform.Position.Y - (rootPart.Position.Y - (rootPart.Size.Y / 2 + platform.Size.Y / 2) - 2)) > 10 then
		platform.Position = rootPart.Position - Vector3.new(0, (rootPart.Size.Y / 2 + platform.Size.Y / 2) + 2, 0)
	end

	platform.Color = platformColor
end

local function startMoving(state)
	local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
	local humanoid = character:WaitForChild("Humanoid")

	if state then
		if isRunning then return end
		isRunning = true

		local function getNextCirclePoint(center, angle)
			local x = math.cos(angle) * radius
			local z = math.sin(angle) * radius
			return center + Vector3.new(x, 0, z)
		end

		local center = character.PrimaryPart.Position
		local jumpTimer = 0

		runService:BindToRenderStep("CircleMovement", Enum.RenderPriority.Character.Value, function(deltaTime)
			if not isRunning then return end

			angle = angle + speed * deltaTime
			local targetPosition = getNextCirclePoint(center, angle)
			humanoid:MoveTo(targetPosition)

			center = character.PrimaryPart.Position

			jumpTimer = jumpTimer + deltaTime
			if jumpTimer >= jumpInterval then
				humanoid.Jump = true
				jumpTimer = 0
			end
		end)
	else
		isRunning = false
		runService:UnbindFromRenderStep("CircleMovement")

		humanoid:Move(Vector3.new(0, 0, 0), false)
		humanoid:MoveTo(character.PrimaryPart.Position)

		task.spawn(function()
			task.wait(0.1)
			humanoid.Jump = true
		end)
	end
end

function SetPlatformForPlayer(state)
	platformActive = state
	if platformActive then
		spawn(function()
			while platformActive do
				updatePlatformForLocalPlayer()
				task.wait(0.5)
			end
		end)
	end
end

function DeleteAllPlatforms()
	for i,v in pairs(workspace:GetChildren()) do
		task.wait()
		if v:IsA("Part") and v.Name == "PlayerPlatform" then
			v:Destroy()
		end
	end
	platform = nil
end

function UpdatePlayerPets()
	AdoptMeConfigs.UnequipAllPets()
	if FirstSelectedPet ~= "None" then
		AdoptMeConfigs.EquipPet(FirstSelectedPet, false)
		local St = tick()
		repeat
			task.wait()
		until (AdoptMeConfigs.GetCurrentPet(FirstSelectedPet) and AdoptMeConfigs.GetCurrentPet(FirstSelectedPet).base and AdoptMeConfigs.GetCurrentPet(FirstSelectedPet).base.pet_model) or (tick() - St > 10)
	end
	if SecondSelectedPet ~= "None" then
		AdoptMeConfigs.EquipPet(SecondSelectedPet, true)
		local St = tick()
		repeat
			task.wait()
		until (AdoptMeConfigs.GetCurrentPet(SecondSelectedPet) and AdoptMeConfigs.GetCurrentPet(SecondSelectedPet).base and AdoptMeConfigs.GetCurrentPet(SecondSelectedPet).base.pet_model) or (tick() - St > 10)
	end
end

function UpdatePlayerPets2()
	AdoptMeConfigs.UnequipAllPets()
	if SelectedAgepet ~= "None" then
		AdoptMeConfigs.EquipPet(SelectedAgepet)
	end
end

function ResetPlayerPets()
	if FirstSelectedPet ~= "None" then
		FirstSelectedPet = "None"
		FirstPetDropdown:Set({"None"})
	end
	if SecondSelectedPet ~= "None" then
		SecondSelectedPet = "None"
		SecondPetDropdown:Set({"None"})
	end
end

local suppressCallback = false
function SetDropDown(DropdownS)
	suppressCallback = true
	if DropdownS == "1" then
		wait(0.2)
		Notification("Dont select the same Pet")
		FirstPetDropdown:Set({"None"})
		FirstSelectedPet = "None"
	end
	if DropdownS == "2" then
		wait(0.2)
		Notification("Dont select the same Pet")
		SecondPetDropdown:Set({"None"})
		SecondSelectedPet = "None"
	end
	if DropdownS == "3" then
		wait(0.2)
		Notification("Please select Main Pet first")
		SecondPetDropdown:Set({"None"})
		SecondSelectedPet = "None"
	end
	if DropdownS == "4" then
		wait(0.2)
		Notification("You dont have 2x pets equip")
		SecondPetDropdown:Set({"None"})
		SecondSelectedPet = "None"
	end
	suppressCallback = false
end

function UpdatePetDropdown()
	local count = 1
	PlayersPets = {}
	PlayerPetsTabel = {}

	local sortablePets = {}

	for petid, petname in pairs(AdoptMeConfigs.GetPlayersInventory().pets) do
		if petname.id ~= "practice_dog" then
			table.insert(sortablePets, {id = petid, name = petname.id, age = petname.properties.age})
		end
	end    

	table.sort(sortablePets, function(a, b)
		local nameA, nameB = a.name:lower(), b.name:lower()
		if nameA == nameB then
			-- Falls die Namen gleich sind, sortiere nach pet.id mit natürlicher Sortierung
			return AdoptMeConfigs.NaturalSort(a.id, b.id)
		end
		return nameA < nameB
	end)

	for index, pet in ipairs(sortablePets) do
		local entry = index .. "=" .. pet.name .. ": " .. pet.age .. " -- " .. AdoptMeConfigs.GetFirstSixLetters(pet.id)
		PlayerPetsTabel[index] = entry
		PlayersPets[index] = {id = pet.id, kind = pet.name, age = pet.age, countid = index}
	end

	FirstPetDropdown:Refresh(PlayerPetsTabel)
	SecondPetDropdown:Refresh(PlayerPetsTabel)
	AgePotionsPetSelectDropdown:Refresh(PlayerPetsTabel)
end

function GetPetCountId(PetUnique)
	for i,v in pairs(PlayersPets) do
		if v.id == PetUnique then
			return v.countid or false
		end
	end
end

function UpdatePetDropdownForSearch(TextToSearch)
	local NewPetsTable = {}

	for i, v in pairs(PlayerPetsTabel) do
		if string.find(v:lower(), TextToSearch:lower()) then
			table.insert(NewPetsTable, v)
		end
	end

	FirstPetDropdown:Refresh(NewPetsTable)
	SecondPetDropdown:Refresh(NewPetsTable)
end

function UpdatePetDropdownForSearch2(TextToSearch)
	local NewPetsTable = {}

	for i, v in pairs(PlayerPetsTabel) do
		if string.find(v:lower(), TextToSearch:lower()) then
			table.insert(NewPetsTable, v)
		end
	end

	AgePotionsPetSelectDropdown:Refresh(NewPetsTable)
end

local WalkSpeedSlider = MainTab:CreateSlider({
	Name = "Player Walk Speed",
	Range = {0, 100},
	Increment = 1,
	Suffix = "WalkSpeed",
	CurrentValue = 16,
	Flag = "WalkSpeedSlider",
	Callback = function(Value)
		local player = game.Players.LocalPlayer
		local character = player.Character or player.CharacterAdded:Wait()
		local humanoid = character:WaitForChild("Humanoid")

		humanoid.WalkSpeed = Value		
	end,
})

local JumpPowerSlider = MainTab:CreateSlider({
	Name = "Player Jump Power",
	Range = {0, 250},
	Increment = 1,
	Suffix = "JumpPower",
	CurrentValue = 50,
	Flag = "JumpPowerSlider",
	Callback = function(Value)
		local player = game.Players.LocalPlayer
		local character = player.Character or player.CharacterAdded:Wait()
		local humanoid = character:WaitForChild("Humanoid")

		humanoid.JumpPower = Value	
	end,
})

local ToggleAfk = MainTab:CreateToggle({
	Name = "Anti Afk",
	CurrentValue = true,
	Flag = "ToggleAfk",
	Callback = function(Value)
		Antiafk = Value
	end,
})

local PerformanceSection = MainTab:CreateSection("Performance")

local ToggleRendering = MainTab:CreateToggle({
	Name = "Disable Rendering (makes the screen white, helps to reduce lags during afk grinding)",
	CurrentValue = false,
	Flag = nil,
	Callback = function(Value)
		runService:Set3dRenderingEnabled(not Value)
	end,
})

local IntervallSlider = MainTab:CreateSlider({
	Name = "Tick-Delay",
	Range = {0.1, 5},
	Increment = 0.1,
	Suffix = "Seconds",
	CurrentValue = 2,
	Flag = "IntervallSlider",
	Callback = function(Value)
		TickDelay = Value
	end,
})

local FpsCapSlider = MainTab:CreateSlider({
	Name = "Fps cap",
	Range = {5, 120},
	Increment = 1,
	Suffix = "fps",
	CurrentValue = 60,
	Flag = "FpsCapSlider",
	Callback = function(Value)
		local s,e = pcall(function()
			setfpscap(Value)
		end)

		if not s then
			Notification("Your executer doesn't support fpscap")
		end
	end,
})

game:service("Players").LocalPlayer.Idled:Connect(function()
	if Antiafk then
		virtualUser:CaptureController()
		virtualUser:ClickButton2(Vector2.new())
	end
end)

local ToggleInfo = AutofarmTab:CreateToggle({
	Name = "Disable Information (Might reduce lags)",
	CurrentValue = false,
	Flag = "ToggleInfo",
	Callback = function(Value)
		DisableInfo = Value
	end,
})
local AutofarmSettingSection = AutofarmTab:CreateSection("Settings")

local PlatformColorPicker = AutofarmTab:CreateColorPicker({
	Name = "Pick Color for Platform",
	Color = Color3.new(0.231373, 0.231373, 0.231373),
	Flag = "PlatformColorPicker",
	Callback = function(Value)
		platformColor = Value
	end
})

local DestroyPlatform = AutofarmTab:CreateButton({
	Name = "Destroy Platform",
	Callback = function()
		DeleteAllPlatforms()
	end
})

DisableSomeAilments = AutofarmTab:CreateDropdown({
	Name = "Select ailments to disable them",
	Options = AllAilments,
	CurrentOption = {"None"},
	MultipleOptions = true,
	Flag = "DisableSomeAilments",
	Callback = function(Option)
		DisabledAilments = {}
		for i,v in pairs(Option) do
			if Option[i] ~= "None" then
				table.insert(DisabledAilments, Option[i])
			end
		end
	end,
})

local AutofarmPetSection = AutofarmTab:CreateSection("Pet Selection")
local InfoDropdownLabel = AutofarmTab:CreateLabel("Info for the Dropdown: (Order=PetKind: PetAge -- PetId)", "info", nil, false)

local SearchPet = AutofarmTab:CreateInput({
	Name = "Search Pet",
	CurrentValue = "",
	PlaceholderText = "Write the pet name here",
	RemoveTextAfterFocusLost = false,
	Flag = nil,
	Callback = function(Text)
		if AdoptMeConfigs.isOnlyLetters(Text) then
			UpdatePetDropdownForSearch(Text)
		elseif Text == "" then
			UpdatePetDropdown()
		else
			Notification("Be sure that you only use letters (a-z)")
		end
	end,
})

FirstPetDropdown = AutofarmTab:CreateDropdown({
	Name = "Select First Pet",
	Options = PlayerPetsTabel,
	CurrentOption = {"None"},
	MultipleOptions = false,
	Flag = "FirstPetDropdown",
	Callback = function(Option)
		for i,v in pairs(Option) do
			if Option[i] ~= "None" then
				if not PlayersPets[tonumber(AdoptMeConfigs.GetNumberBeforeEqual(Option[i]))] or not PlayersPets[tonumber(AdoptMeConfigs.GetNumberBeforeEqual(Option[i]))].id then
					return
				end
				local PetId = PlayersPets[tonumber(AdoptMeConfigs.GetNumberBeforeEqual(Option[i]))].id
				if not string.find(Option[i], PlayersPets[tonumber(AdoptMeConfigs.GetNumberBeforeEqual(Option[i]))].kind) or not string.find(Option[i], AdoptMeConfigs.GetFirstSixLetters(PlayersPets[tonumber(AdoptMeConfigs.GetNumberBeforeEqual(Option[i]))].id)) then
					FirstSelectedPet = "None"
					FirstPetDropdown:Set({"None"})
					Notification("Something went wrong when loading the first dropdown pet, the position of the pet is different or the animal is no longer available")
					return
				end
				if SecondSelectedPet ~= PetId and PetId ~= nil then
					FirstSelectedPet = PetId
					UpdatePlayerPets()
				else
					if Option[i] ~= "None" then
						SetDropDown("1")
						break
					end
				end
			end
		end
	end,
})

SecondPetDropdown = AutofarmTab:CreateDropdown({
	Name = "Select Second Pet",
	Options = PlayerPetsTabel,
	CurrentOption = {"None"},
	MultipleOptions = false,
	Flag = "SecondPetDropdown",
	Callback = function(Option)
		if suppressCallback then
			return
		end
			local PlayerHaveCertificate = AdoptMeConfigs.GetCertificate()
		if PlayerHaveCertificate then
			for i,v in pairs(Option) do
				if Option[i] ~= "None" then
					if not PlayersPets[tonumber(AdoptMeConfigs.GetNumberBeforeEqual(Option[i]))] or not PlayersPets[tonumber(AdoptMeConfigs.GetNumberBeforeEqual(Option[i]))].id then
						return
					end
					local PetId = PlayersPets[tonumber(AdoptMeConfigs.GetNumberBeforeEqual(Option[i]))].id
					if not string.find(Option[i], PlayersPets[tonumber(AdoptMeConfigs.GetNumberBeforeEqual(Option[i]))].kind) or not string.find(Option[i], AdoptMeConfigs.GetFirstSixLetters(PlayersPets[tonumber(AdoptMeConfigs.GetNumberBeforeEqual(Option[i]))].id)) then
						SecondSelectedPet = "None"
						SecondPetDropdown:Set({"None"})
						Notification("Something went wrong when loading the second dropdown pet, the position of the pet is different or the animal is no longer available")
						return
					end
					if FirstSelectedPet ~= "None" then
						if FirstSelectedPet ~= PetId and PetId ~= nil then
							SecondSelectedPet = PetId
							UpdatePlayerPets()
						else
							if Option[i] ~= "None" then
								SetDropDown("2")
								break
							end
						end
					else
						if Option[i] ~= "None" then
							SetDropDown("3")
							break
						end
					end
				end
			end
		else
			SetDropDown("4")
		end
	end,
})

local RefreshPetsDropdownButton = AutofarmTab:CreateButton({
	Name = "Refresh Pets Dropdown",
	Callback = function()
		UpdatePetDropdown()
	end
})

local ResetPetsDropdownButton = AutofarmTab:CreateButton({
	Name = "Reset Pets Dropdown",
	Callback = function()
		ResetPlayerPets()
	end
})

local AutofarmPetSection = AutofarmTab:CreateSection("Pet Autofarm")

PetAutofarmToggle = AutofarmTab:CreateToggle({
	Name = "Autofarm selected Pets",
	CurrentValue = false,
	Flag = "PetAutofarmToggle",
	Callback = function(Value)
		if Value then
			if not IsOtherAutofarmOn("PetAutofarm") then
				AutoFarmFunctions.PetAutofarm.State = Value
			else
				Notification("Please turn off (" .. GetActivAutofarm() .. ") to be able to use this one!")
				PetAutofarmToggle:Set(false)
			end
		else
			AutoFarmFunctions.PetAutofarm.State = Value
			SetPlatformForPlayer(false)
		end
	end,
})

AutofarmAgePotionsToggle = AutofarmTab:CreateToggle({
	Name = "Autofarm Age Potions",
	CurrentValue = false,
	Flag = "AutofarmAgePotionsToggle",
	Callback = function(Value)
		if Value then
			if not IsOtherAutofarmOn("AgePotionFarm") then
				AutoFarmFunctions.AgePotionFarm.State = Value
			else
				Notification("Please turn off (" .. GetActivAutofarm() .. ") to be able to use this one!")
				AutofarmAgePotionsToggle:Set(false)
			end
		else
			AutoFarmFunctions.AgePotionFarm.State = Value
			SetPlatformForPlayer(false)
		end
	end,
})

AutoHatchEggsToggle = AutofarmTab:CreateToggle({
	Name = "Autohatch Eggs",
	CurrentValue = false,
	Flag = "AutoHatchEggsToggle",
	Callback = function(Value)
		if Value then
			if not IsOtherAutofarmOn("AutoHatchEggs") then
				AutoFarmFunctions.AutoHatchEggs.State = Value
			else
				Notification("Please turn off (" .. GetActivAutofarm() .. ") to be able to use this one!")
				AutoHatchEggsToggle:Set(false)
			end
		else
			AutoFarmFunctions.AutoHatchEggs.State = Value
			SetPlatformForPlayer(false)
		end
	end,
})
local AutofarmBabyToggle = nil


local BabySection = AutofarmTab:CreateSection("Baby Autofarm")
AutofarmBabyToggle = AutofarmTab:CreateToggle({
	Name = "Autofarm Baby",
	CurrentValue = false,
	Flag = "BabySection",
	Callback = function(Value)
		if Value then
			if IsOtherAutofarmOn("") then
				DoBabyAutoFarm = Value
				AdoptMeConfigs.SetPlayerToBaby()
			else
				Notification("You must have activated one of the pet autofarms")
				AutofarmBabyToggle:Set(false)
				AdoptMeConfigs.SetPlayerToParent()
			end
		else
			DoBabyAutoFarm = Value
			AdoptMeConfigs.SetPlayerToParent()
		end
	end,
})

local ExtrasSection = AutofarmTab:CreateSection("Extras")

DoMysteryPetNeedToggle = AutofarmTab:CreateToggle({
	Name = "Do mystery pet need",
	CurrentValue = true,
	Flag = "DoMysteryPetNeedToggle",
	Callback = function(Value)
		if Value then
			DoMysteryPetNeed()
		else
			DoMysteryPetNeedVal = false
		end
	end,
})

local DividerUnderMystery = AutofarmTab:CreateDivider()

local PetSwitchOutToggle = AutofarmTab:CreateToggle({
	Name = "Switch out same Pet when Fullgrown",
	CurrentValue = false,
	Flag = "PetSwitchOutToggle",
	Callback = function(Value)
		if Value then
			PetSwitchOutToggleFunc()
		else
			ExtraFunctions.SwitchOutPets = false
		end
	end,
})

function PetSwitchOutToggleFunc()
	if not CheckIfOtherExtra("SwitchOut") then
		ExtraFunctions.SwitchOutPets = true
	else
		wait(0.2)
		PetSwitchOutToggle:Set(false)
		ExtraFunctions.SwitchOutPets = false
	end
end

local FarmAllPetsToggle = AutofarmTab:CreateToggle({
	Name = "Farm all pets (will switch to random pet)",
	CurrentValue = false,
	Flag = "FarmAllPetsToggle",
	Callback = function(Value)
		if Value then
			FarmAllPetsToggleFunc()
		else
			ExtraFunctions.FarmAllPets = false
		end
	end,
})

function FarmAllPetsToggleFunc()
	if not CheckIfOtherExtra("FarmAllPets") then
		ExtraFunctions.FarmAllPets = true
	else
		wait(0.2)
		FarmAllPetsToggle:Set(false)
		ExtraFunctions.FarmAllPets = false
	end
end

local DividerUnderSwitchOut = AutofarmTab:CreateDivider()

local EggSwitchOutToggle = AutofarmTab:CreateToggle({
	Name = "Switch out same Egg when hatched",
	CurrentValue = false,
	Flag = "EggSwitchOutToggle",
	Callback = function(Value)
		if Value then
			EggSwitchOutToggleFunc()
		else
			ExtraFunctions.SwitchOutEggs = false
		end
	end,
})

function EggSwitchOutToggleFunc()
	if not CheckIfOtherExtra("SwitchOutEggs") then
		ExtraFunctions.SwitchOutEggs = true
	else
		wait(0.2)
		EggSwitchOutToggle:Set(false)
		ExtraFunctions.SwitchOutEggs = false
	end
end

local FarmAllEggsToggle = AutofarmTab:CreateToggle({
	Name = "Hatch all Eggs (will switch to random egg)",
	CurrentValue = false,
	Flag = "FarmAllEggsToggle",
	Callback = function(Value)
		if Value then
			HatchAllEggsToggleFunc()
		else
			ExtraFunctions.HatchAllEggs = false
		end
	end,
})

function HatchAllEggsToggleFunc()
	if not CheckIfOtherExtra("HatchAllEggs") then
		ExtraFunctions.HatchAllEggs = true
	else
		wait(0.2)
		AutoHatchEggsToggle:Set(false)
		ExtraFunctions.HatchAllEggs = false
	end
end

local BucksSection = BucksTab:CreateSection("Settings")

local DisableDialogToggle = BucksTab:CreateToggle({
	Name = "Disable 'Okay' Dialogs",
	CurrentValue = false,
	Flag = nil,
	Callback = function(Value)
		DisableDialogSetting = Value
		if Value then
			DisableDialog()
		end
	end,
})

local BucksSection = BucksTab:CreateSection("Cash Register")

local RegisterInfo = BucksTab:CreateLabel("Transfer up to 150 bucks every 2 minutes", "info", nil, false)
local ScanRegisterInfo = BucksTab:CreateLabel("Scan info: none", "info", nil, false)

local ScanForRegisterButton = BucksTab:CreateButton({
	Name = "Scan for Cash Register",
	Callback = function()
		ScanForRegister()
	end
})

local PayBucksToRegisterSlider = BucksTab:CreateSlider({
	Name = "Amount of bucks to pay to cash register",
	Range = {1, 50},
	Increment = 1,
	Suffix = "Bucks",
	CurrentValue = 50,
	Flag = "PayBucksToRegisterSlider",
	Callback = function(Value)
		AmountToRegister = Value
	end,
})

local DividerBucks1 = BucksTab:CreateDivider()

local FarmCashRegisterToggle = BucksTab:CreateToggle({
	Name = "Transfer bucks with cash register",
	CurrentValue = false,
	Flag = nil,
	Callback = function(Value)
		TransferMoneyFunctions.TransferBucksWithCashRegister = Value
		if Value then
			FarmWithRegisterFunc()
		end
	end,
})

local AgePotionSection = ExtrasTab:CreateSection("Auto give potions")

local SearchAgePet = ExtrasTab:CreateInput({
	Name = "Search Pet",
	CurrentValue = "",
	PlaceholderText = "Write the pet name here",
	RemoveTextAfterFocusLost = false,
	Flag = nil,
	Callback = function(Text)
		if AdoptMeConfigs.isOnlyLetters(Text) then
			UpdatePetDropdownForSearch2(Text)
		elseif Text == "" then
			UpdatePetDropdown()
		else
			Notification("Be sure that you only use letters (a-z)")
		end
	end,
})

function AgePetSelection(PetUnique)
	local PlayerPetConfigs = AdoptMeConfigs.GetPlayersPetConfigs(PetUnique)
	local IsPetEgg = AdoptMeConfigs.GetPetConfigs(PlayerPetConfigs.petKind).isEgg

	if PlayerPetConfigs.petAge and PlayerPetConfigs.petAge >= 6 then
		Notification("this pet must not be fully grown")
		AgePotionsPetSelectDropdown:Set({"None"})
		SelectedAgepet = "None"
		UpdatePlayerPets2()
		return
	end

	if not IsPetEgg then
		SelectedAgepet = PetUnique
		UpdatePlayerPets2()
	else
		Notification("This Pet cant use potions!")
		AgePotionsPetSelectDropdown:Set({"None"})
		SelectedAgepet = "None"
		UpdatePlayerPets2()
	end
end

AgePotionsPetSelectDropdown = ExtrasTab:CreateDropdown({
	Name = "Select a Pet",
	Options = PlayerPetsTabel,
	CurrentOption = {"None"},
	MultipleOptions = false,
	Flag = nil,
	Callback = function(Option)
		for i,v in pairs(Option) do
			if Option[i] ~= "None" then
				local PetId = PlayersPets[tonumber(AdoptMeConfigs.GetNumberBeforeEqual(Option[i]))].id
				AgePetSelection(PetId)
			end
		end
	end,
})
UpdatePetDropdown()

UseTinyAgePotions = ExtrasTab:CreateToggle({
	Name = "Use tiny age potions",
	CurrentValue = false,
	Flag = nil,
	Callback = function(Value)
		if Value then
			SelectedFood = "tiny_pet_age_potion"
		else
			SelectedFood = "pet_age_potion"
		end
	end,
})

local DividerpetAge = ExtrasTab:CreateDivider()
GivePetAgePotions = ExtrasTab:CreateToggle({
	Name = "auto give selected pet potions",
	CurrentValue = false,
	Flag = nil,
	Callback = function(Value)
		if Value then
			if not IsOtherAutofarmOn("AutoGiveAgePotion") then
				AutoFarmFunctions.AutoGiveAgePotions.State = Value
			else
				Notification("Please turn off (" .. GetActivAutofarm() .. ") to be able to use this one!")
				GivePetAgePotions:Set(false)
			end
		else
			AutoFarmFunctions.AutoGiveAgePotions.State = Value
		end
	end,
})

ChangePetAgePotions = ExtrasTab:CreateToggle({
	Name = "switch to same pet when full grown",
	CurrentValue = false,
	Flag = nil,
	Callback = function(Value)
		ChangeAgePet = Value
	end,
})

local LureSection = ExtrasTab:CreateSection("Lure")

local AutoFarmLureToggle = ExtrasTab:CreateToggle({
	Name = "auto lure",
	CurrentValue = false,
	Flag = "AutoFarmLureToggle",
	Callback = function(Value)
		AutoLure = Value
	end,
})


local VisualSection = ExtrasTab:CreateSection("Visual stuff")

local MakeEquippedPetFlyRide = ExtrasTab:CreateButton({
	Name = "make equipped pets fly and ride",
	Callback = function()
		local success, err = pcall(function()
			for i,v in pairs(AdoptMeConfigs.GetPetPetEntityManager().get_local_owned_pet_entities()) do
				table.foreach(AdoptMeConfigs.GetPlayersInventory().pets, function(i2,v2)
					if string.find(v.unique_id, i2) then
						v2.properties.flyable = true
						v2.properties.rideable = true
					end
				end)
			end
		end)

		if not success then
			Notification("Something went wrong: " .. err)
		end
	end
})

local DividerVisual = ExtrasTab:CreateDivider()

local MakeAllPetsNeon = ExtrasTab:CreateButton({
	Name = "make all pets neon",
	Callback = function()
		local success, err = pcall(function()
			table.foreach(AdoptMeConfigs.GetPlayersInventory().pets, function(i2,v2)
				v2.properties.neon = true
			end)
		end)

		if not success then
			Notification("Something went wrong: " .. err)
		end
	end
})


local MakeAllPetsMega = ExtrasTab:CreateButton({
	Name = "make all pets mega",
	Callback = function()
		local success, err = pcall(function()
			table.foreach(AdoptMeConfigs.GetPlayersInventory().pets, function(i2,v2)
				v2.properties.mega_neon = true
			end)
		end)

		if not success then
			Notification("Something went wrong: " .. err)
		end
	end
})

local MakeAllPetsFlyRide = ExtrasTab:CreateButton({
	Name = "make all pets fly and ride",
	Callback = function()
		local success, err = pcall(function()
			table.foreach(AdoptMeConfigs.GetPlayersInventory().pets, function(i2,v2)
				v2.properties.flyable = true
				v2.properties.rideable = true
			end)
		end)

		if not success then
			Notification("Something went wrong: " .. err)
		end
	end
})

local DiscordSection = MiscTab:CreateSection("Discord")
local InfoDiscordLabel = MiscTab:CreateLabel("Any problems? Join our discord server below", "circle-help", nil, false)

local CopyDiscordLink = MiscTab:CreateButton({
	Name = "Copy discord link to clipboard",
	Callback = function()
		fsetclipboard(tostring(discordlink))
		InfoNotification("Copied discord link")
	end
})

local WebhooksSection = MiscTab:CreateSection("Webhooks")

local SetWebhookInput = MiscTab:CreateInput({
	Name = "Webhook notifications",
	CurrentValue = "",
	PlaceholderText = "paste your webhook here in",
	RemoveTextAfterFocusLost = false,
	Flag = "SetWebhookInput",
	Callback = function(Text)
		DcWebhook = Text
	end,
})

local WebhookIntervalSlider = MiscTab:CreateSlider({
	Name = "Interval between the individual webhook notifications",
	Range = {1, 30},
	Increment = 1,
	Suffix = "Minutes",
	CurrentValue = 5,
	Flag = "WebhookIntervalSlider",
	Callback = function(Value)
		WebhookInterval = (Value * 60)
	end,
})

local SendWebhooksToggle = MiscTab:CreateToggle({
	Name = "Send notifications to webhook",
	CurrentValue = false,
	Flag = "SendWebhooksToggle",
	Callback = function(Value)
		SendWebhook = Value
	end,
})

local TestWebhookButton = MiscTab:CreateButton({
	Name = "Test Webhook",
	Callback = function()
		local ss, ee = pcall(function()
			SendNothicationToWebhook()
		end)
		if ss then
			InfoNotification("Test was successful")
		else
			Notification("Something went wrong: " .. ee)
		end
	end
})

local InfoSection = MiscTab:CreateSection("Infos")
local MiscParagraph2 = MiscTab:CreateParagraph({Title = "Furniture that the script automatically buys if not available in the house:", Content = "- BasicCrib\n- StylishShower\n- AilmentsRefresh2024CheapWaterBowl\n- AilmentsRefresh2024CheapFoodBowl\n- Toilet\n- Lures2023NormalLure"})

function DisableDialog()
	task.spawn(function()
		if DisableDialogSetting then

			while DisableDialogSetting do
				local LocalGui = game.Players.LocalPlayer:WaitForChild("PlayerGui"):WaitForChild("DialogApp").Dialog.NormalDialog
				task.wait()
				if LocalGui.Visible then
					LocalGui.Parent.Parent.Enabled = false
				else
					LocalGui.Parent.Parent.Enabled = true
				end
			end
			local LocalGui = game.Players.LocalPlayer:WaitForChild("PlayerGui"):WaitForChild("DialogApp").Dialog.NormalDialog
			LocalGui.Parent.Parent.Enabled = true
		end
	end)
end

function ScanForRegister()
	SendToRegister = ""
	SendToRegisterPlayer = ""
	local HouseInteriors = workspace.HouseInteriors:WaitForChild("furniture"):GetChildren()

	for i,v in pairs(HouseInteriors) do
		task.wait()
		if v:IsA("Folder") and v:FindFirstChildWhichIsA("Model") then
			if not string.find(v.Name, game.Players.LocalPlayer.Name) then
				if v:FindFirstChild("CashRegister") then
					SendToRegister = AdoptMeConfigs.getLastSegment(v.Name)
					SendToRegisterPlayer = AdoptMeConfigs.GetHouseInterior()
					if string.find(SendToRegister, "f-") then
						ScanRegisterInfo:Set("Scan info: successful", "circle-check", nil, false)
					else
						Notification("something went wrong with the scanning")
						ScanRegisterInfo:Set("Scan info: failed", "circle-x", nil, false)
						SendToRegister = ""
						SendToRegisterPlayer = ""
					end
					return
				end
			else
				Notification("you can't scan in your own house")
				ScanRegisterInfo:Set("Scan info: failed", "circle-x", nil, false)
				return
			end
		else
			Notification("You must be in a house to scan")
			ScanRegisterInfo:Set("Scan info: failed", "circle-x", nil, false)
			return
		end
	end
	ScanRegisterInfo:Set("Scan info: failed", "circle-x", nil, false)
	Notification("cash register was not found")
end

function FarmWithRegisterFunc()
	task.spawn(function()
		if not CheckIfOtherTransfer("TransferBucksWithCashRegister") then
			while TransferMoneyFunctions.TransferBucksWithCashRegister do
				task.wait()
				if SendToRegister ~= "" and SendToRegisterPlayer ~= "" then
					for i = 1, 3 do
						task.wait()
						if TransferMoneyFunctions.TransferBucksWithCashRegister then
							local args = {
								[1] = SendToRegisterPlayer,
								[2] = SendToRegister,
								[3] = "UseBlock",
								[4] = AmountToRegister,
								[5] = game:GetService("Players").LocalPlayer.Character
							}
							AdoptMeConfigs.RunRouterClient(false, "HousingAPI/ActivateFurniture", args)
							task.wait(1)
						end
					end
					local CountRe = 0
					repeat
						task.wait(1)
						CountRe = CountRe + 1
					until CountRe > 125 or not TransferMoneyFunctions.TransferBucksWithCashRegister
				else
					wait(0.2)
					FarmCashRegisterToggle:Set(false)
					TransferMoneyFunctions.TransferBucksWithCashRegister = false
					Notification("Please scan for a cash register first!")
				end
			end
		else
			wait(0.2)
			FarmCashRegisterToggle:Set(false)
			TransferMoneyFunctions.TransferBucksWithCashRegister = false
		end
	end)
end

function PetWait(Begin, Request, Pet1, Pet2, ExtraTime)
	if Begin then
		local starttime = tick()
		repeat
			task.wait(0.5)
		until AdoptMeConfigs.GetPlayerInterior() == Request or (tick() - starttime) >= 10 or (not AutoFarmFunctions.PetAutofarm.State and not AutoFarmFunctions.AgePotionFarm.State and not AutoFarmFunctions.AutoHatchEggs.State)
		if (tick() - starttime) >= 10 then
			return true
		end
	else
		local Status = false
		local starttime = tick()
		repeat
			task.wait(0.5)
			local PetNeedTask = false
			local Ailments = AdoptMeConfigs.GetAilments(Pet1, Pet2, false, DisabledAilments)
			if Ailments then
				if Pet1 ~= nil then
					for i, NewPetNeed in pairs(Ailments.FirstPet) do
						if i == Request then
							PetNeedTask = true
							break
						end
					end
				elseif Pet2 ~= nil then
					for i, NewPetNeed in pairs(Ailments.SecondPet) do
						if i == Request then
							PetNeedTask = true
							break
						end
					end
				end
			else
				return false
			end
			Status = PetNeedTask
		until not Status or (tick() - starttime) >= 60 or (not AutoFarmFunctions.PetAutofarm.State and not AutoFarmFunctions.AgePotionFarm.State and not AutoFarmFunctions.AutoHatchEggs.State)
		return true
	end
end

function BabyWait(Begin, Request, ExtraTime)
	if Begin then
		local starttime = tick()

		repeat
			task.wait(0.5)
		until AdoptMeConfigs.GetPlayerInterior() == Request or (tick() - starttime) >= 10 or not DoBabyAutoFarm
		if (tick() - starttime) >= 10 then
			return true
		end
	else
		local Status = false
		local starttime = tick()

		repeat
			task.wait(0.5)
			local BabyNeedTask = false
			local Ailments = AdoptMeConfigs.GetAilments(nil, nil, true, DisabledAilments)
			if Ailments then
				for i, NewPetNeed in pairs(Ailments.Baby) do
					if i == Request then
						BabyNeedTask = true
						break
					end
				end
			end
			Status = BabyNeedTask
		until not Status or (tick() - starttime) >= 60 or not DoBabyAutoFarm
		return true
	end
end
local DoBabyNeed = {
	["sleepy"] = function()
		if BedId == nil then
			InfoMainLabel:Set("No bed found", "info", nil, false)
			return
		end
		local CanStop = false
		task.spawn(function()
			BabyWait(false, "sleepy", 1)
			CanStop = true
		end)

		task.spawn(function()
			if game:GetService("Players").LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") and not CanStop then
				local args = {
					[1] = game:GetService("Players").LocalPlayer,
					[2] = BedId,
					[3] = "UseBlock",
					[4] = {
						["cframe"] = LocalPlayer.Character.HumanoidRootPart.CFrame
					},
					[5] = game:GetService("Players").LocalPlayer.Character
				}

				AdoptMeConfigs.RunRouterClient(false, "HousingAPI/ActivateFurniture", args)
			end
		end)

		repeat task.wait(0.1) until CanStop	
		AdoptMeConfigs.RunRouterClient(true, "AdoptAPI/ExitSeatStates", nil)
	end,
	["dirty"] = function()
		if ShowerId == nil then
			InfoMainLabel:Set("No shower found", "info", nil, false)
			return
		end
		
		local CanStop = false
		task.spawn(function()
			BabyWait(false, "dirty", 1)
			CanStop = true
		end)

		task.spawn(function()
			if game:GetService("Players").LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") and not CanStop then
				local args = {
					[1] = game:GetService("Players").LocalPlayer,
					[2] = ShowerId,
					[3] = "UseBlock",
					[4] = {
						["cframe"] = LocalPlayer.Character.HumanoidRootPart.CFrame
					},
					[5] = game:GetService("Players").LocalPlayer.Character
				}

				AdoptMeConfigs.RunRouterClient(false, "HousingAPI/ActivateFurniture", args)
			end
		end)
		repeat task.wait(0.1) until CanStop
		AdoptMeConfigs.RunRouterClient(true, "AdoptAPI/ExitSeatStates", nil)

	end,
	["thirsty"] = function()
		local args = {
			[1] = "food",
			[2] = "water",
			[3] = {
				["buy_count"] = 1
			}
		}

		AdoptMeConfigs.RunRouterClient(false, "ShopAPI/BuyItem", args)

		local FoodId

		for i,v in pairs(AdoptMeConfigs.GetPlayersInventory().food) do
			task.wait()
			if v.id == "water" then
				FoodId = i
			end
		end
		task.wait(0.5)
		if not FoodId then return end

		local args = {
			[1] = FoodId,
			[2] = {
				["equip_as_last"] = false,
				["use_sound_delay"] = true
			}
		}
		AdoptMeConfigs.RunRouterClient(false, "ToolAPI/Equip", args)
		task.wait(0.5)

		for i = 1, 8 do
			local args3 = {
				[1] = FoodId,
				[2] = "END"
			}

			AdoptMeConfigs.RunRouterClient(true, "ToolAPI/ServerUseTool", args3)
			task.wait(0.3)
		end
	end,
	["hungry"] = function()
		local args = {
			[1] = "food",
			[2] = "teachers_apple",
			[3] = {
				["buy_count"] = 1
			}
		}

		AdoptMeConfigs.RunRouterClient(false, "ShopAPI/BuyItem", args)

		local FoodId

		for i,v in pairs(AdoptMeConfigs.GetPlayersInventory().food) do
			task.wait()
			if v.id == "teachers_apple" then
				FoodId = i
			end
		end
		task.wait(0.5)
		if not FoodId then return end

		local args = {
			[1] = FoodId,
			[2] = {
				["equip_as_last"] = false,
				["use_sound_delay"] = true
			}
		}
		AdoptMeConfigs.RunRouterClient(false, "ToolAPI/Equip", args)
		task.wait(0.5)

		for i = 1, 3 do
			local args3 = {
				[1] = FoodId,
				[2] = "END"
			}

			AdoptMeConfigs.RunRouterClient(true, "ToolAPI/ServerUseTool", args3)
			task.wait(0.3)
		end
	end,
	["sick"] = function()
		AdoptMeConfigs.GoToStore("Hospital")
		local CanStop = false
		task.spawn(function()
			BabyWait(false, "sick", 1)
			CanStop = true
		end)

		task.spawn(function()
			while not CanStop do
				task.wait(1)
				local args = {
					[1] = AdoptMeConfigs.GetFurniture("Doctor"),
					[2] = "UseBlock",
					[3] = "Yes",
					[4] = game:GetService("Players").LocalPlayer.Character
				}
				AdoptMeConfigs.RunRouterClient(false, "HousingAPI/ActivateInteriorFurniture", args)
			end
		end)

		repeat task.wait(0.1) until CanStop
	end,
	["salon"] = function()
		AdoptMeConfigs.GoToStore("Salon")
		LocalPlayer.Character.HumanoidRootPart.CFrame = LocalPlayer.Character.HumanoidRootPart.CFrame + Vector3.new(0, 5, 0)
		BabyWait(false, "salon", 1)
	end,
	["bored"] = function()
		AdoptMeConfigs.GoToMainMap()
		LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-416.258881, 35.9008026, -1755.65979) 
		BabyWait(false, "bored", 1)
	end,
	["camping"] = function()
		AdoptMeConfigs.GoToMainMap()
		LocalPlayer.Character.HumanoidRootPart.CFrame = workspace.Interiors:FindFirstChildWhichIsA("Model"):GetModelCFrame():ToWorldSpace(CFrame.new(0, 0, -6))
		LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-13.1087923, 35.8056011, -1051.61743) 
		BabyWait(false, "camping", 1)
	end,
	["beach_party"] = function()
		AdoptMeConfigs.GoToMainMap()
		LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-543.437134, 35.4161434, -1479.17554) 
		BabyWait(false, "beach_party", 1)
	end,
	["pizza_party"] = function()
		AdoptMeConfigs.GoToStore("PizzaShop")
		LocalPlayer.Character.HumanoidRootPart.CFrame = LocalPlayer.Character.HumanoidRootPart.CFrame + Vector3.new(0, 5, 0)
		BabyWait(false, "pizza_party", 1)
	end,
	["school"] = function()
		AdoptMeConfigs.GoToStore("School")
		LocalPlayer.Character.HumanoidRootPart.CFrame = LocalPlayer.Character.HumanoidRootPart.CFrame + Vector3.new(0, 5, 0)
		BabyWait(false, "school", 1)
	end,
}

local DoPetNeed = {
	["sleepy"] = function(PetIdToDoNeed1, PetIdToDoNeed2)
		if BedId == nil then
			InfoMainLabel:Set("No bed found", "info", nil, false)
			return
		end
		UpdatePlayerPets()
		local CanStop = false
		task.spawn(function()
			PetWait(false, "sleepy", PetIdToDoNeed1, PetIdToDoNeed2, 1)
			CanStop = true
		end)
		if AdoptMeConfigs.GetCurrentPet(PetIdToDoNeed1 or PetIdToDoNeed2) and AdoptMeConfigs.GetCurrentPet(PetIdToDoNeed1 or PetIdToDoNeed2).base and not CanStop then
			local args = {
				[1] = game:GetService("Players").LocalPlayer,
				[2] = BedId,
				[3] = "UseBlock",
				[4] = {
					["cframe"] = LocalPlayer.Character.HumanoidRootPart.CFrame
				},
				[5] = AdoptMeConfigs.GetCurrentPet(PetIdToDoNeed1 or PetIdToDoNeed2).base.pet_model.Parent
			}
			AdoptMeConfigs.RunRouterClient(false, "HousingAPI/ActivateFurniture", args)
		end
		repeat task.wait() until CanStop
	end,

	["dirty"] = function(PetIdToDoNeed1, PetIdToDoNeed2)
		if ShowerId == nil then
			InfoMainLabel:Set("No shower found", "info", nil, false)
			return
		end
		UpdatePlayerPets()
		local CanStop = false
		task.spawn(function()
			PetWait(false, "dirty", PetIdToDoNeed1, PetIdToDoNeed2, 1)
			CanStop = true
		end)
		
		if AdoptMeConfigs.GetCurrentPet(PetIdToDoNeed1 or PetIdToDoNeed2) and AdoptMeConfigs.GetCurrentPet(PetIdToDoNeed1 or PetIdToDoNeed2).base and AdoptMeConfigs.GetCurrentPet(PetIdToDoNeed1 or PetIdToDoNeed2).base.pet_model and not CanStop then
			local args = {
				[1] = game:GetService("Players").LocalPlayer,
				[2] = ShowerId,
				[3] = "UseBlock",
				[4] = {
					["cframe"] = LocalPlayer.Character.HumanoidRootPart.CFrame
				},
				[5] = AdoptMeConfigs.GetCurrentPet(PetIdToDoNeed1 or PetIdToDoNeed2).base.pet_model.Parent
			}
			AdoptMeConfigs.RunRouterClient(false, "HousingAPI/ActivateFurniture", args)
		end
		repeat task.wait() until CanStop
	end,
	["thirsty"] = function(PetIdToDoNeed1, PetIdToDoNeed2)
		if WaterBowlId == nil then
			InfoMainLabel:Set("No water bowl found", "info", nil, false)
			return
		end
		
		UpdatePlayerPets()
		local CanStop = false
		task.spawn(function()
			PetWait(false, "thirsty", PetIdToDoNeed1, PetIdToDoNeed2, 1)
			CanStop = true
		end)

		if AdoptMeConfigs.GetCurrentPet(PetIdToDoNeed1 or PetIdToDoNeed2) and AdoptMeConfigs.GetCurrentPet(PetIdToDoNeed1 or PetIdToDoNeed2).base and not CanStop then
			local args = {
				[1] = game:GetService("Players").LocalPlayer,
				[2] = WaterBowlId,
				[3] = "UseBlock",
				[4] = {
					["cframe"] = LocalPlayer.Character.HumanoidRootPart.CFrame
				},
				[5] = AdoptMeConfigs.GetCurrentPet(PetIdToDoNeed1 or PetIdToDoNeed2).base.pet_model.Parent
			}
			AdoptMeConfigs.RunRouterClient(false, "HousingAPI/ActivateFurniture", args)
		end
		repeat task.wait() until CanStop
	end,
	["hungry"] = function(PetIdToDoNeed1, PetIdToDoNeed2)
		if FoodBowlId == nil then
			InfoMainLabel:Set("No food bowl found", "info", nil, false)
			return
		end
		
		UpdatePlayerPets()
		local CanStop = false
		task.spawn(function()
			PetWait(false, "hungry", PetIdToDoNeed1, PetIdToDoNeed2, 1)
			CanStop = true
		end)

		if AdoptMeConfigs.GetCurrentPet(PetIdToDoNeed1 or PetIdToDoNeed2) and AdoptMeConfigs.GetCurrentPet(PetIdToDoNeed1 or PetIdToDoNeed2).base and not CanStop then
			local args = {
				[1] = game:GetService("Players").LocalPlayer,
				[2] = FoodBowlId,
				[3] = "UseBlock",
				[4] = {
					["cframe"] = LocalPlayer.Character.HumanoidRootPart.CFrame
				},
				[5] = AdoptMeConfigs.GetCurrentPet(PetIdToDoNeed1 or PetIdToDoNeed2).base.pet_model.Parent
			}
			AdoptMeConfigs.RunRouterClient(false, "HousingAPI/ActivateFurniture", args)
		end
		repeat task.wait() until CanStop
	end,
	["toilet"] = function(PetIdToDoNeed1, PetIdToDoNeed2)
		if ToiletId == nil then
			InfoMainLabel:Set("No toilet found", "info", nil, false)
			return
		end
		
		UpdatePlayerPets()
		local CanStop = false
		task.spawn(function()
			PetWait(false, "toilet", PetIdToDoNeed1, PetIdToDoNeed2, 1)
			CanStop = true
		end)

		if AdoptMeConfigs.GetCurrentPet(PetIdToDoNeed1 or PetIdToDoNeed2) and AdoptMeConfigs.GetCurrentPet(PetIdToDoNeed1 or PetIdToDoNeed2).base and not CanStop then
			local args = {
				[1] = game:GetService("Players").LocalPlayer,
				[2] = ToiletId,
				[3] = "Seat1",
				[4] = {
					["cframe"] = LocalPlayer.Character.HumanoidRootPart.CFrame
				},
				[5] = AdoptMeConfigs.GetCurrentPet(PetIdToDoNeed1 or PetIdToDoNeed2).base.pet_model.Parent
			}

			AdoptMeConfigs.RunRouterClient(false, "HousingAPI/ActivateFurniture", args)
		end
		repeat task.wait() until CanStop
	end,
	["sick"] = function(PetIdToDoNeed1, PetIdToDoNeed2)
		AdoptMeConfigs.GoToStore("Hospital")
		local CanStop = false
		task.spawn(function()
			PetWait(false, "sick", PetIdToDoNeed1, PetIdToDoNeed2, 1)
			CanStop = true
		end)
		task.spawn(function()
			while not CanStop do
				task.wait(1)
				local args = {
					[1] = AdoptMeConfigs.GetFurniture("Doctor"),
					[2] = "UseBlock",
					[3] = "Yes",
					[4] = game:GetService("Players").LocalPlayer.Character
				}
				AdoptMeConfigs.RunRouterClient(false, "HousingAPI/ActivateInteriorFurniture", args)
			end
		end)
		repeat task.wait(0.1) until CanStop
	end,
	["play"] = function(PetIdToDoNeed1, PetIdToDoNeed2)
		AdoptMeConfigs.GoToNeighborhood()
		LocalPlayer.Character.HumanoidRootPart.CFrame = LocalPlayer.Character.HumanoidRootPart.CFrame + Vector3.new(0, 5, 0)
		UpdatePlayerPets()
		local ToyId

		for i,v in pairs(AdoptMeConfigs.GetPlayersInventory().toys) do
			task.wait()
			if v.id == "squeaky_bone_default" then
				ToyId = i
			end
		end
		task.wait(0.5)
		if not ToyId then return end
		task.wait(0.5)

		for i = 1, 3 do
			local args = {
				[1] = ToyId,
				[2] = {
					["equip_as_last"] = false,
					["use_sound_delay"] = true
				}
			}
			AdoptMeConfigs.RunRouterClient(false, "ToolAPI/Equip", args)
			task.wait(0.5)
			local args = {
				[1] = "__Enum_PetObjectCreatorType_1",
				[2] = {
					["reaction_name"] = "ThrowToyReaction",
					["unique_id"] = ToyId
				}
			}
			AdoptMeConfigs.RunRouterClient(false, "PetObjectAPI/CreatePetObject", args)
			task.wait(5)
		end
		task.wait(0.1)
		local args = {
			[1] = ToyId
		}
		AdoptMeConfigs.RunRouterClient(false, "ToolAPI/Unequip", args)
	end,
	["ride"] = function(PetIdToDoNeed1, PetIdToDoNeed2)
		AdoptMeConfigs.GoToNeighborhood()
		LocalPlayer.Character.HumanoidRootPart.CFrame = LocalPlayer.Character.HumanoidRootPart.CFrame + Vector3.new(0, 5, 0)
		UpdatePlayerPets()
		local StrollerId

		for i,v in pairs(AdoptMeConfigs.GetPlayersInventory().strollers) do
			task.wait()
			if v.id == "stroller-default" then
				StrollerId = i
			end
		end
		task.wait(0.5)
		if not StrollerId then return end

		local args = {
			[1] = StrollerId,
			[2] = {
				["equip_as_last"] = false,
				["use_sound_delay"] = true
			}
		}
		AdoptMeConfigs.RunRouterClient(false, "ToolAPI/Equip", args)
		task.wait(0.5)
		if not game:GetService("Players").LocalPlayer.Character:FindFirstChild("StrollerTool") then return end
		if AdoptMeConfigs.GetCurrentPet(PetIdToDoNeed1 or PetIdToDoNeed2) and AdoptMeConfigs.GetCurrentPet(PetIdToDoNeed1 or PetIdToDoNeed2).base then
			local args = {
				[1] = AdoptMeConfigs.GetCurrentPet(PetIdToDoNeed1 or PetIdToDoNeed2).base.pet_model.Parent,
				[2] = game:GetService("Players").LocalPlayer.Character.StrollerTool.ModelHandle.TouchToSits.TouchToSit
			}
			AdoptMeConfigs.RunRouterClient(false, "AdoptAPI/UseStroller", args)
		end
		startMoving(true)
		PetWait(false, "ride", PetIdToDoNeed1, PetIdToDoNeed2, 1)
		startMoving(false)
		local args = {
			[1] = StrollerId
		}
		AdoptMeConfigs.RunRouterClient(false, "ToolAPI/Unequip", args)
	end,
	["salon"] = function(PetIdToDoNeed1, PetIdToDoNeed2)
		AdoptMeConfigs.GoToStore("Salon")
		LocalPlayer.Character.HumanoidRootPart.CFrame = LocalPlayer.Character.HumanoidRootPart.CFrame + Vector3.new(0, 5, 0)
		PetWait(false, "salon", PetIdToDoNeed1, PetIdToDoNeed2, 1)
	end,
	["bored"] = function(PetIdToDoNeed1, PetIdToDoNeed2)
		AdoptMeConfigs.GoToMainMap()
		LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-416.258881, 35.9008026, -1755.65979) 
		PetWait(false, "bored", PetIdToDoNeed1, PetIdToDoNeed2, 1)
	end,
	["camping"] = function(PetIdToDoNeed1, PetIdToDoNeed2)
		AdoptMeConfigs.GoToMainMap()
		LocalPlayer.Character.HumanoidRootPart.CFrame = workspace.Interiors:FindFirstChildWhichIsA("Model"):GetModelCFrame():ToWorldSpace(CFrame.new(0, 0, -6))
		LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-13.1087923, 35.8056011, -1051.61743) 
		PetWait(false, "camping", PetIdToDoNeed1, PetIdToDoNeed2, 1)
	end,
	["beach_party"] = function(PetIdToDoNeed1, PetIdToDoNeed2)
		AdoptMeConfigs.GoToMainMap()
		LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-543.437134, 35.4161434, -1479.17554) 
		PetWait(false, "beach_party", PetIdToDoNeed1, PetIdToDoNeed2, 1)
	end,
	["pizza_party"] = function(PetIdToDoNeed1, PetIdToDoNeed2)
		AdoptMeConfigs.GoToStore("PizzaShop")
		LocalPlayer.Character.HumanoidRootPart.CFrame = LocalPlayer.Character.HumanoidRootPart.CFrame + Vector3.new(0, 5, 0)
		PetWait(false, "pizza_party", PetIdToDoNeed1, PetIdToDoNeed2, 1)
	end,
	["school"] = function(PetIdToDoNeed1, PetIdToDoNeed2)
		AdoptMeConfigs.GoToStore("School")
		LocalPlayer.Character.HumanoidRootPart.CFrame = LocalPlayer.Character.HumanoidRootPart.CFrame + Vector3.new(0, 5, 0)
		PetWait(false, "school", PetIdToDoNeed1, PetIdToDoNeed2, 1)
	end,
	["walk"] = function(PetIdToDoNeed1, PetIdToDoNeed2)
		AdoptMeConfigs.GoToNeighborhood()
		LocalPlayer.Character.HumanoidRootPart.CFrame = LocalPlayer.Character.HumanoidRootPart.CFrame + Vector3.new(0, 5, 0)
		UpdatePlayerPets()
		startMoving(true)
		PetWait(false, "walk", PetIdToDoNeed1, PetIdToDoNeed2, 1)
		startMoving(false)
	end,
	["mystery"] = function(PetIdToDoNeed1, PetIdToDoNeed2)
		UpdatePlayerPets()
		local NewMysteryAil = ""
		local PetArg = {
			is_pet = true,
			pet_unique = PetIdToDoNeed1 or PetIdToDoNeed2,
			player = game.Players.LocalPlayer,
			pet_id = AdoptMeConfigs.GetPlayersPetConfigs(PetIdToDoNeed1 or PetIdToDoNeed2).petKind
		}
		local oldiden = getiden()
		setiden(2)
		local NewAil = AilmentsClientRe.get_ailments_for_pet(PetArg)
		local GetAil = NewAil.mystery.action.options.get_ailment_slots(NewAil.mystery.action.options.random_seed, AilmentsClientRe.get_ailments_for_pet(PetArg), PetArg)
		for i, v in pairs(GetAil) do
			task.wait()
			if i == 1 then
				NewMysteryAil = v
				break
			end
		end
		setiden(oldiden)
		local args = {
			[1] = PetIdToDoNeed1 or PetIdToDoNeed2,
			[2] = "mystery",
			[3] = 1,
			[4] = NewMysteryAil
		}
		AdoptMeConfigs.RunRouterClient(true, "AilmentsAPI/ChooseMysteryAilment", args)
	end,
	["pet_me"] = function(PetIdToDoNeed1, PetIdToDoNeed2)
		UpdatePlayerPets()
		for i = 1, 5 do
			task.wait(1)
			if not AdoptMeConfigs.GetCurrentPet(PetIdToDoNeed1 or PetIdToDoNeed2) or not AdoptMeConfigs.GetCurrentPet(PetIdToDoNeed1 or PetIdToDoNeed2).base or not AdoptMeConfigs.GetCurrentPet(PetIdToDoNeed1 or PetIdToDoNeed2).base.pet_model then
				return
			end
			local args1 = {
				[1] = AdoptMeConfigs.GetCurrentPet(PetIdToDoNeed1 or PetIdToDoNeed2).base.pet_model.Parent
			}

			AdoptMeConfigs.RunRouterClient(true, "AdoptAPI/FocusPet", args1)

			if AdoptMeConfigs.GetCurrentPet(PetIdToDoNeed1 or PetIdToDoNeed2) and AdoptMeConfigs.GetCurrentPet(PetIdToDoNeed1 or PetIdToDoNeed2).base then
				local args2 = {
					[1] = AdoptMeConfigs.GetCurrentPet(PetIdToDoNeed1 or PetIdToDoNeed2).base.pet_model.Parent,
					[2] = {
						["FocusPet"] = true
					}
				}

				AdoptMeConfigs.RunRouterClient(true, "PetAPI/ReplicateActivePerformances", args2)
			end

			local args3 = {
				[1] = PetIdToDoNeed1 or PetIdToDoNeed2
			}
			AdoptMeConfigs.RunRouterClient(true, "AilmentsAPI/ProgressPetMeAilment", args3)
		end
		PetWait(false, "pet_me", PetIdToDoNeed1, PetIdToDoNeed2, 1)
	end,
}

local PetFarmFunction = function()
	local success, err = pcall(function()

		SetPlatformForPlayer(true)

		InfoMainLabel:Set("PetFarm loading...")
		AdoptMeConfigs.PrintDebugMessages("PetFarm loading...", DebugMessages)

		if not AutoFarmFunctions.PetAutofarm.State then
			SetPlatformForPlayer(false)
			AutoFarmFunctions.PetAutofarm.Running = false
			return
		end

		local FirstPetKind = AdoptMeConfigs.GetPlayersPetConfigs(FirstSelectedPet).petKind
		local SecondPetKind = AdoptMeConfigs.GetPlayersPetConfigs(SecondSelectedPet).petKind
		local IsFirstPetEgg = AdoptMeConfigs.GetPetConfigs(FirstPetKind).isEgg
		local IsSecondPetEgg = AdoptMeConfigs.GetPetConfigs(SecondPetKind).isEgg

		if IsFirstPetEgg or IsSecondPetEgg then
			task.wait(0.2)
			Notification("You cant use eggs")
			PetAutofarmToggle:Set(false)
			AutoFarmFunctions.PetAutofarm.Running = false
			return
		end

		if FirstSelectedPet ~= "None" then
			for needType, _ in pairs(AdoptMeConfigs.GetAilments(FirstSelectedPet, nil, false, DisabledAilments).FirstPet) do
				task.wait()
				if AutoFarmFunctions.PetAutofarm.State then
					local success, err = pcall(function()
						if DoPetNeed[needType] then
							InfoMainLabel:Set("Doing task: " .. needType  .. " (FirstPet, PetFarm)")
							AdoptMeConfigs.PrintDebugMessages("Doing task: " .. needType  .. " (FirstPet, PetFarm)", DebugMessages)
							DoPetNeed[needType](FirstSelectedPet, nil)
							InfoMainLabel:Set("Task: " .. needType  .. " done (FirstPet, PetFarm)")
							AdoptMeConfigs.PrintDebugMessages("Task: " .. needType  .. " done (FirstPet, PetFarm)", DebugMessages)
						end
					end)

					if not success then
						warn("Something went wrong while doing " .. needType .. ": " .. err .. " (1)")
						task.wait(2)
					else
						if AdoptMeConfigs.GetPlayersPetConfigs(FirstSelectedPet).petAge and ExtraFunctions.SwitchOutPets or ExtraFunctions.FarmAllPets then				
							if AdoptMeConfigs.GetPlayersPetConfigs(FirstSelectedPet).petAge >= 6 then
								InfoNotification("Changing pet, if possible... please wait")					
								if ExtraFunctions.SwitchOutPets then
									local NewPet = AdoptMeConfigs.GetSameKind(FirstSelectedPet, SecondSelectedPet, FirstPetKind)
									if NewPet ~= nil then
										FirstSelectedPet = NewPet
										UpdatePlayerPets()
										InfoNotification("Successful pet changed")
										if GetPetCountId(NewPet) then
											FirstPetDropdown:Set({PlayerPetsTabel[GetPetCountId(NewPet)]})
										end
									else
										FirstSelectedPet = "None"
										UpdatePlayerPets()
										Notification("No more same pets available")
										break
									end
								elseif ExtraFunctions.FarmAllPets then
									local NewPet = AdoptMeConfigs.GetRandomKind(FirstSelectedPet, SecondSelectedPet, FirstPetKind)

									if NewPet ~= nil then
										FirstSelectedPet = NewPet
										UpdatePlayerPets()
										InfoNotification("Successful pet changed")
										if GetPetCountId(NewPet) then
											FirstPetDropdown:Set({PlayerPetsTabel[GetPetCountId(NewPet)]})
										end
									else
										FirstSelectedPet = "None"
										UpdatePlayerPets()
										Notification("No more pets available")
										break
									end
								end
							end
						end
					end
				end
			end
		end

		if SecondSelectedPet ~= "None" then
			for needType, _ in pairs(AdoptMeConfigs.GetAilments(nil, SecondSelectedPet, false, DisabledAilments).SecondPet) do
				task.wait()
				if AutoFarmFunctions.PetAutofarm.State then
					local success, err = pcall(function()
						if DoPetNeed[needType] then
							InfoMainLabel:Set("Doing task: " .. needType  .. " (SecondPet, PetFarm)")
							AdoptMeConfigs.PrintDebugMessages("Doing task: " .. needType  .. " (SecondPet, PetFarm)", DebugMessages)
							DoPetNeed[needType](nil, SecondSelectedPet)
							InfoMainLabel:Set("Task: " .. needType  .. " done (SecondPet, PetFarm)")
							AdoptMeConfigs.PrintDebugMessages("Task: " .. needType  .. " done (SecondPet, PetFarm)", DebugMessages)
						end
					end)

					if not success then
						warn("Something went wrong while doing " .. needType .. ": " .. err .. " (1)")
						task.wait(2)
					else
						if AdoptMeConfigs.GetPlayersPetConfigs(SecondSelectedPet).petAge and ExtraFunctions.SwitchOutPets or ExtraFunctions.FarmAllPets then				
							if AdoptMeConfigs.GetPlayersPetConfigs(SecondSelectedPet).petAge >= 6 then
								InfoNotification("Changing pet, if possible... please wait")					
								if ExtraFunctions.SwitchOutPets then
									local NewPet = AdoptMeConfigs.GetSameKind(FirstSelectedPet, SecondSelectedPet, SecondPetKind)
									if NewPet ~= nil then
										SecondSelectedPet = NewPet
										UpdatePlayerPets()
										InfoNotification("Successful pet changed")
										if GetPetCountId(NewPet) then
											SecondPetDropdown:Set({PlayerPetsTabel[GetPetCountId(NewPet)]})
										end
									else
										SecondSelectedPet = "None"
										UpdatePlayerPets()
										Notification("No more same pets available")
										break
									end
								elseif ExtraFunctions.FarmAllPets then
									local NewPet = AdoptMeConfigs.GetRandomKind(SecondSelectedPet, FirstSelectedPet, SecondPetKind)

									if NewPet ~= nil then
										SecondSelectedPet = NewPet
										UpdatePlayerPets()
										InfoNotification("Successful pet changed")
										if GetPetCountId(NewPet) then
											SecondPetDropdown:Set({PlayerPetsTabel[GetPetCountId(NewPet)]})
										end
									else
										SecondSelectedPet = "None"
										UpdatePlayerPets()
										Notification("No more pets available")
										break
									end
								end
							end
						end
					end
				end
			end
		end

		if DoBabyAutoFarm then
			for needType, _ in pairs(AdoptMeConfigs.GetAilments(nil, nil, true, DisabledAilments).Baby) do
				task.wait()
				if AutoFarmFunctions.PetAutofarm.State then
					local success, err = pcall(function()
						if DoBabyNeed[needType] then
							InfoMainLabel:Set("Doing task: " .. needType  .. " (Baby, PetFarm)")
							AdoptMeConfigs.PrintDebugMessages("Doing task: " .. needType  .. " (Baby, PetFarm)", DebugMessages)
							DoBabyNeed[needType]()
							InfoMainLabel:Set("Task: " .. needType  .. " done (Baby, PetFarm)")
							AdoptMeConfigs.PrintDebugMessages("Task: " .. needType  .. " done (Baby, PetFarm)", DebugMessages)
						end
					end)

					if not success then
						warn("Something went wrong while doing " .. needType .. ": " .. err .. " (Baby)")
						task.wait(2)
					end
				end
			end
		end

		AutoFarmFunctions.PetAutofarm.Running = false
		task.wait(2)
	end)

	if not success then
		warn("Something went wrong: " .. err)
		AutoFarmFunctions.PetAutofarm.Running = false
	end
end

local AgePotionFarmFunction = function()
	local success, err = pcall(function()
		SetPlatformForPlayer(true)

		InfoMainLabel:Set("AgePotionFarm loading...")
		AdoptMeConfigs.PrintDebugMessages("AgePotionFarm loading...", DebugMessages)

		if not AutoFarmFunctions.AgePotionFarm.State then
			SetPlatformForPlayer(false)
			AutoFarmFunctions.AgePotionFarm.Running = false
			return
		end

		local FirstPetKind = AdoptMeConfigs.GetPlayersPetConfigs(FirstSelectedPet)
		local SecondPetKind = AdoptMeConfigs.GetPlayersPetConfigs(SecondSelectedPet)
		local IsFirstPetEgg = AdoptMeConfigs.GetPetConfigs(FirstPetKind.petKind).isEgg
		local IsSecondPetEgg = AdoptMeConfigs.GetPetConfigs(SecondPetKind.petKind).isEgg

		if IsFirstPetEgg or IsSecondPetEgg then
			task.wait(0.2)
			Notification("You cant use eggs")
			PetAutofarmToggle:Set(false)
			AutoFarmFunctions.PetAutofarm.Running = false
			return
		end

		if FirstSelectedPet ~= "None" and FirstPetKind.petAge and FirstPetKind.petAge < 6 then
			task.wait(0.2)
			AutofarmAgePotionsToggle:Set(false)
			AutoFarmFunctions.AgePotionFarm.Running = false
			Notification("Main selected Pet must be fullgrown")
			return
		end

		if SecondSelectedPet ~= "None" and SecondPetKind.petAge and SecondPetKind.petAge < 6 then
			task.wait(0.2)
			AutofarmAgePotionsToggle:Set(false)
			AutoFarmFunctions.AgePotionFarm.Running = false
			Notification("Second selected Pet must be fullgrown")
			return
		end

		if FirstSelectedPet ~= "None" then
			for needType, _ in pairs(AdoptMeConfigs.GetAilments(FirstSelectedPet, nil, false, DisabledAilments).FirstPet) do
				task.wait()
				if AutoFarmFunctions.AgePotionFarm.State then
					local success, err = pcall(function()
						if DoPetNeed[needType] then
							InfoMainLabel:Set("Doing task: " .. needType  .. " (FirstPet, AutoAgePotion)")
							AdoptMeConfigs.PrintDebugMessages("Doing task: " .. needType  .. " (FirstPet, AutoAgePotion)", DebugMessages)
							DoPetNeed[needType](FirstSelectedPet, nil)
							InfoMainLabel:Set("Task: " .. needType  .. " done (FirstPet, AutoAgePotion)")
							AdoptMeConfigs.PrintDebugMessages("Task: " .. needType  .. " done (FirstPet, AutoAgePotion)", DebugMessages)
						end
					end)

					if not success then
						warn("Something went wrong while doing " .. needType .. ": " .. err .. " (1)")
						task.wait(2)
					end
				end
			end
		end

		if SecondSelectedPet ~= "None" then
			for needType, _ in pairs(AdoptMeConfigs.GetAilments(nil, SecondSelectedPet, false, DisabledAilments).SecondPet) do
				task.wait()
				if AutoFarmFunctions.AgePotionFarm.State then
					local success, err = pcall(function()
						if DoPetNeed[needType] then
							InfoMainLabel:Set("Doing task: " .. needType  .. " (SecondPet, AutoAgePotion)")
							AdoptMeConfigs.PrintDebugMessages("Doing task: " .. needType  .. " (SecondPet, AutoAgePotion)", DebugMessages)
							DoPetNeed[needType](nil, SecondSelectedPet)
							InfoMainLabel:Set("Task: " .. needType  .. " done (SecondPet, AutoAgePotion)")
							AdoptMeConfigs.PrintDebugMessages("Task: " .. needType  .. " done (SecondPet, AutoAgePotion)", DebugMessages)
						end
					end)

					if not success then
						warn("Something went wrong while doing " .. needType .. ": " .. err .. " (2)")
						task.wait(2)
					end
				end
			end
		end

		if DoBabyAutoFarm then
			for needType, _ in pairs(AdoptMeConfigs.GetAilments(nil, nil, true, DisabledAilments).Baby) do
				task.wait()
				if AutoFarmFunctions.AgePotionFarm.State then
					local success, err = pcall(function()
						if DoBabyNeed[needType] then
							InfoMainLabel:Set("Doing task: " .. needType  .. " (Baby, AutoAgePotion)")
							AdoptMeConfigs.PrintDebugMessages("Doing task: " .. needType  .. " (Baby, AutoAgePotion)", DebugMessages)
							DoBabyNeed[needType]()
							InfoMainLabel:Set("Task: " .. needType  .. " done (Baby, AutoAgePotion)")
							AdoptMeConfigs.PrintDebugMessages("Task: " .. needType  .. " done (Baby, AutoAgePotion)", DebugMessages)
						end
					end)

					if not success then
						warn("Something went wrong while doing " .. needType .. ": " .. err .. " (Baby)")
						task.wait(2)
					end
				end
			end
		end

		AutoFarmFunctions.AgePotionFarm.Running = false
		task.wait(2)
	end)

	if not success then
		warn("Something went wrong: " .. err)
		AutoFarmFunctions.AgePotionFarm.Running = false
	end
end

local AutoHatchFunction = function()
	local success, err = pcall(function()
		SetPlatformForPlayer(true)

		InfoMainLabel:Set("Autohatch loading...")
		AdoptMeConfigs.PrintDebugMessages("Autohatch loading...", DebugMessages)

		if not AutoFarmFunctions.AutoHatchEggs.State then
			SetPlatformForPlayer(false)
			AutoFarmFunctions.AutoHatchEggs.Running = false
			return
		end
		local FirstPetKind = AdoptMeConfigs.GetPlayersPetConfigs(FirstSelectedPet).petKind
		local SecondPetKind = AdoptMeConfigs.GetPlayersPetConfigs(SecondSelectedPet).petKind
		local IsFirstPetEgg = AdoptMeConfigs.GetPetConfigs(FirstPetKind).isEgg
		local IsSecondPetEgg = AdoptMeConfigs.GetPetConfigs(SecondPetKind).isEgg
		if not IsFirstPetEgg and not IsSecondPetEgg then
			task.wait(0.2)
			Notification("You must use eggs")
			AutoHatchEggsToggle:Set(false)
			AutoFarmFunctions.AutoHatchEggs.Running = false
			return
		end

		if FirstSelectedPet ~= "None" then
			for needType, _ in pairs(AdoptMeConfigs.GetAilments(FirstSelectedPet, nil, false, DisabledAilments).FirstPet) do
				task.wait()
				if AutoFarmFunctions.AutoHatchEggs.State then
					local success, err = pcall(function()
						if DoPetNeed[needType] then
							InfoMainLabel:Set("Doing task: " .. needType  .. " (FirstPet, Autohatch)")
							AdoptMeConfigs.PrintDebugMessages("Doing task: " .. needType  .. " (FirstPet, Autohatch)", DebugMessages)
							DoPetNeed[needType](FirstSelectedPet, nil)
							InfoMainLabel:Set("Task: " .. needType  .. " done (FirstPet, Autohatch)")
							AdoptMeConfigs.PrintDebugMessages("Task: " .. needType  .. " done (FirstPet, Autohatch)", DebugMessages)
						end
					end)

					if not success then
						warn("Something went wrong while doing " .. needType .. ": " .. err .. " (1)")
						task.wait(2)
					else
						task.wait(2)
						if AdoptMeConfigs.IsEggNotThere(FirstSelectedPet) then
							InfoNotification("Changing egg, if possible... please wait")
							if ExtraFunctions.SwitchOutEggs then
								local NewEgg = AdoptMeConfigs.GetSameKind(FirstSelectedPet, SecondSelectedPet, FirstPetKind)
								if NewEgg ~= nil then
									FirstSelectedPet = NewEgg
									UpdatePlayerPets()
									InfoNotification("Successful egg changed")
									if GetPetCountId(NewEgg) then
										FirstPetDropdown:Set({PlayerPetsTabel[GetPetCountId(NewEgg)]})
									end
								else
									FirstSelectedPet = "None"
									UpdatePlayerPets()
									Notification("No more same eggs available")
									break
								end
							elseif ExtraFunctions.HatchAllEggs then
								local NewEgg = AdoptMeConfigs.GetRandomKind(FirstSelectedPet, SecondSelectedPet, FirstPetKind)

								if NewEgg ~= nil then
									FirstSelectedPet = NewEgg
									UpdatePlayerPets()
									InfoNotification("Successful egg changed")
									if GetPetCountId(NewEgg) then
										FirstPetDropdown:Set({PlayerPetsTabel[GetPetCountId(NewEgg)]})
									end
								else
									FirstSelectedPet = "None"
									UpdatePlayerPets()
									Notification("No more eggs available")
									break
								end
							end
						end

						if AdoptMeConfigs.IsEggNotThere(SecondSelectedPet) then
							InfoNotification("Changing egg, if possible... please wait")
							if ExtraFunctions.SwitchOutEggs then
								local NewEgg = AdoptMeConfigs.GetSameKind(FirstSelectedPet, SecondSelectedPet, SecondPetKind)
								if NewEgg ~= nil then
									SecondSelectedPet = NewEgg
									UpdatePlayerPets()
									InfoNotification("Successful egg changed")
									if GetPetCountId(NewEgg) then
										SecondPetDropdown:Set({PlayerPetsTabel[GetPetCountId(NewEgg)]})
									end
								else
									SecondSelectedPet = "None"
									UpdatePlayerPets()
									Notification("No more same eggs available")
									break
								end
							elseif ExtraFunctions.HatchAllEggs then
								local NewEgg = AdoptMeConfigs.GetRandomKind(SecondSelectedPet, FirstSelectedPet, SecondPetKind)

								if NewEgg ~= nil then
									SecondSelectedPet = NewEgg
									UpdatePlayerPets()
									InfoNotification("Successful egg changed")
									if GetPetCountId(NewEgg) then
										SecondSelectedPet:Set({PlayerPetsTabel[GetPetCountId(NewEgg)]})
									end
								else
									SecondSelectedPet = "None"
									UpdatePlayerPets()
									Notification("No more eggs available")
									break
								end
							end
						end
					end
				end
			end
		end

		if SecondSelectedPet ~= "None" then
			for needType, _ in pairs(AdoptMeConfigs.GetAilments(nil, SecondSelectedPet, false, DisabledAilments).SecondPet) do
				task.wait()
				if AutoFarmFunctions.AutoHatchEggs.State then
					local success, err = pcall(function()
						if DoPetNeed[needType] then
							InfoMainLabel:Set("Doing task: " .. needType  .. " (SecondPet, Autohatch)")
							AdoptMeConfigs.PrintDebugMessages("Doing task: " .. needType  .. " (SecondPet, Autohatch)", DebugMessages)
							DoPetNeed[needType](nil, SecondSelectedPet)
							InfoMainLabel:Set("Task: " .. needType  .. " done (SecondPet, Autohatch)")
							AdoptMeConfigs.PrintDebugMessages("Task: " .. needType  .. " done (SecondPet, Autohatch)", DebugMessages)
						end
					end)

					if not success then
						warn("Something went wrong while doing " .. needType .. ": " .. err .. " (1)")
						task.wait(2)
					else
						task.wait(2)
						if AdoptMeConfigs.IsEggNotThere(FirstSelectedPet) then
							InfoNotification("Changing egg, if possible... please wait")
							if ExtraFunctions.SwitchOutEggs then
								local NewEgg = AdoptMeConfigs.GetSameKind(FirstSelectedPet, SecondSelectedPet, FirstPetKind)
								if NewEgg ~= nil then
									FirstSelectedPet = NewEgg
									UpdatePlayerPets()
									InfoNotification("Successful egg changed")
									if GetPetCountId(NewEgg) then
										FirstPetDropdown:Set({PlayerPetsTabel[GetPetCountId(NewEgg)]})
									end
								else
									FirstSelectedPet = "None"
									UpdatePlayerPets()
									Notification("No more same eggs available")
									break
								end
							elseif ExtraFunctions.HatchAllEggs then
								local NewEgg = AdoptMeConfigs.GetRandomKind(FirstSelectedPet, SecondSelectedPet, FirstPetKind)

								if NewEgg ~= nil then
									FirstSelectedPet = NewEgg
									UpdatePlayerPets()
									InfoNotification("Successful egg changed")
									if GetPetCountId(NewEgg) then
										FirstPetDropdown:Set({PlayerPetsTabel[GetPetCountId(NewEgg)]})
									end
								else
									FirstSelectedPet = "None"
									UpdatePlayerPets()
									Notification("No more eggs available")
									break
								end
							end
						end

						if AdoptMeConfigs.IsEggNotThere(SecondSelectedPet) then
							InfoNotification("Changing egg, if possible... please wait")
							if ExtraFunctions.SwitchOutEggs then
								local NewEgg = AdoptMeConfigs.GetSameKind(FirstSelectedPet, SecondSelectedPet, SecondPetKind)
								if NewEgg ~= nil then
									SecondSelectedPet = NewEgg
									UpdatePlayerPets()
									InfoNotification("Successful egg changed")
									if GetPetCountId(NewEgg) then
										SecondPetDropdown:Set({PlayerPetsTabel[GetPetCountId(NewEgg)]})
									end
								else
									SecondSelectedPet = "None"
									UpdatePlayerPets()
									Notification("No more same eggs available")
									break
								end
							elseif ExtraFunctions.HatchAllEggs then
								local NewEgg = AdoptMeConfigs.GetRandomKind(SecondSelectedPet, FirstSelectedPet, SecondPetKind)

								if NewEgg ~= nil then
									SecondSelectedPet = NewEgg
									UpdatePlayerPets()
									InfoNotification("Successful egg changed")
									if GetPetCountId(NewEgg) then
										SecondSelectedPet:Set({PlayerPetsTabel[GetPetCountId(NewEgg)]})
									end
								else
									SecondSelectedPet = "None"
									UpdatePlayerPets()
									Notification("No more eggs available")
									break
								end
							end
						end
					end
				end
			end
		end


		if DoBabyAutoFarm then
			for needType, _ in pairs(AdoptMeConfigs.GetAilments(nil, nil, true, DisabledAilments).Baby) do
				task.wait()
				if AutoFarmFunctions.AutoHatchEggs.State then
					local success, err = pcall(function()
						if DoBabyNeed[needType] then
							InfoMainLabel:Set("Doing task: " .. needType  .. " (Baby, Autohatch)")
							AdoptMeConfigs.PrintDebugMessages("Doing task: " .. needType  .. " (Baby, Autohatch)", DebugMessages)
							DoBabyNeed[needType]()
							InfoMainLabel:Set("Task: " .. needType  .. " done (Baby, Autohatch)")
							AdoptMeConfigs.PrintDebugMessages("Task: " .. needType  .. " done (Baby, Autohatch)", DebugMessages)
						end
					end)

					if not success then
						warn("Something went wrong while doing " .. needType .. ": " .. err .. " (Baby)")
						task.wait(2)
					end
				end
			end
		end

		AutoFarmFunctions.AutoHatchEggs.Running = false
		task.wait(2)
	end)

	if not success then
		warn("Something went wrong: " .. err)
		AutoFarmFunctions.AutoHatchEggs.Running = false
	end
end

local AutoGivePetAgePotionsFunc = function()
	if SelectedAgepet == "" or SelectedAgepet == "None" then
		Notification("Please select a pet")
		GivePetAgePotions:Set(false)
		AutoFarmFunctions.AutoGiveAgePotions.Running = false
		return
	end
	local FoodToGive = AdoptMeConfigs.GetFoodToGive(SelectedFood)

	if FoodToGive == "" then
		Notification("No more " .. SelectedFood)
		GivePetAgePotions:Set(false)
		AutoFarmFunctions.AutoGiveAgePotions.Running = false
		return
	end

	local PetConfigs = AdoptMeConfigs.GetPlayersPetConfigs(SelectedAgepet)

	if PetConfigs.petAge and PetConfigs.petAge >= 6 then
		if ChangeAgePet then
			local NewPet = AdoptMeConfigs.GetSameAgeKind(SelectedAgepet, PetConfigs.petKind)

			if NewPet ~= nil then
				SelectedAgepet = NewPet
				UpdatePlayerPets2()
				InfoNotification("Successful pet changed")
				if GetPetCountId(NewPet) then
					AgePotionsPetSelectDropdown:Set({PlayerPetsTabel[GetPetCountId(NewPet)]})
				end
			else
				SelectedAgepet = "None"
				AgePotionsPetSelectDropdown:Set({"None"})
				Notification("No more of the same pet available")
				AutoFarmFunctions.AutoGiveAgePotions.State = false
			end
		else
			AutoFarmFunctions.AutoGiveAgePotions.State = false
		end
		return
	end

	local args = {
		[1] = FoodToGive,
		[2] = {
			["equip_as_last"] = false,
			["use_sound_delay"] = true
		}
	}
	AdoptMeConfigs.RunRouterClient(false, "ToolAPI/Equip", args)

	task.wait(0.2)

	local args2 = {
		[1] = "__Enum_PetObjectCreatorType_2",
		[2] = {
			["pet_unique"] = SelectedAgepet,
			["unique_id"] = FoodToGive
		}
	}

	AdoptMeConfigs.RunRouterClient(false, "PetObjectAPI/CreatePetObject", args2)
	task.wait(9)

	local PetConfigs2 = AdoptMeConfigs.GetPlayersPetConfigs(SelectedAgepet)

	if PetConfigs2.petAge and PetConfigs2.petAge >= 6 then
		if ChangeAgePet then
			local NewPet = AdoptMeConfigs.GetSameAgeKind(SelectedAgepet, PetConfigs2.petKind)

			if NewPet ~= nil then
				SelectedAgepet = NewPet
				UpdatePlayerPets2()
				InfoNotification("Successful pet changed")
				if GetPetCountId(NewPet) then
					AgePotionsPetSelectDropdown:Set({PlayerPetsTabel[GetPetCountId(NewPet)]})
				end
			else
				SelectedAgepet = "None"
				AgePotionsPetSelectDropdown:Set({"None"})
				Notification("No more of the same pet available")
				AutoFarmFunctions.AutoGiveAgePotions.State = false
			end
		else
			AutoFarmFunctions.AutoGiveAgePotions.State = false
		end
	end
	AutoFarmFunctions.AutoGiveAgePotions.Running = false
end

local PlayerInfoUpdate = function(SetLabel)
	local Success, err = pcall(function()
		local NewPlayerMoney = AdoptMeConfigs.GetPlayerMoney()
		local NewPlayerAgePotion = AdoptMeConfigs.GetPlayerPotionAmount()

		if NewPlayerMoney > OldPlayerMoney then
			TotalMoneyFarmed = TotalMoneyFarmed + (NewPlayerMoney - OldPlayerMoney)
		end

		if NewPlayerAgePotion > OldPlayerAgePotion then
			TotalAgePotionFarmed = TotalAgePotionFarmed + (NewPlayerAgePotion - OldPlayerAgePotion)
		end

		OldPlayerAgePotion = NewPlayerAgePotion
		OldPlayerMoney = NewPlayerMoney

		if SetLabel then
			InfoMoneyLabel:Set("You earned: " .. TotalMoneyFarmed .. " Bucks", "circle-dollar-sign", nil, false)
			InfoAgePotionLabel:Set("You farmed: " .. TotalAgePotionFarmed .. " Age Potions", "cup-soda", nil, false)
		end
	end)
end

runService.RenderStepped:Connect(function()
	if getgenv().TbiConfigs and not getgenv().TbiConfigs[TbiConf].State then
		Rayfield:Destroy()
	end

	if (tick() - OldTick) > TickDelay and getgenv().TbiConfigs and getgenv().TbiConfigs[TbiConf].State then
		OldTick = tick()
		if string.find(DcWebhook, "discord.com/api") and SendWebhook then
			if (tick() - WebhookIntervalTick) > WebhookInterval then
				WebhookIntervalTick = tick()
				PlayerInfoUpdate(false)
				local ss, ee = pcall(function()
					SendNothicationToWebhook()
				end)
			end
		end

		task.spawn(function()
			if AutoFarmFunctions.PetAutofarm.State and not AutoFarmFunctions.PetAutofarm.Running and not IsOtherAutofarmOn("PetAutofarm") then
				AutoFarmFunctions.PetAutofarm.Running = true
				PetFarmFunction()
			end

			if AutoFarmFunctions.AgePotionFarm.State and not AutoFarmFunctions.AgePotionFarm.Running and not IsOtherAutofarmOn("AgePotionFarm") then
				AutoFarmFunctions.AgePotionFarm.Running = true
				AgePotionFarmFunction()
			end

			if AutoFarmFunctions.AutoHatchEggs.State and not AutoFarmFunctions.AutoHatchEggs.Running and not IsOtherAutofarmOn("AutoHatchEggs") then
				AutoFarmFunctions.AutoHatchEggs.Running = true
				AutoHatchFunction()
			end

			if AutoFarmFunctions.AutoGiveAgePotions.State and not AutoFarmFunctions.AutoGiveAgePotions.Running and not IsOtherAutofarmOn("AutoGiveAgePotions") then
				AutoFarmFunctions.AutoGiveAgePotions.Running = true
				AutoGivePetAgePotionsFunc()
			end
		end)

		if workspace:FindFirstChild("StaticMap") and workspace:FindFirstChild("StaticMap"):FindFirstChild("Campsite") 
			and workspace:FindFirstChild("StaticMap"):FindFirstChild("Campsite"):FindFirstChild("CampsiteOrigin")
		then
			workspace:FindFirstChild("StaticMap"):FindFirstChild("Campsite"):FindFirstChild("CampsiteOrigin"):Destroy()
		end

		if workspace.Terrain then
			workspace.Terrain:Clear()
		end

		if not DisableInfo then
			PlayerInfoUpdate(true)
		end

		task.spawn(function()
			if AutoLure and not AutoLureRunning then
				AutoLureRunning = true
				local ss,ee = pcall(function()

					if LureId ~= nil then
						local cookie = AdoptMeConfigs.GetFoodToGive("lures_2023_campfire_cookies")
						local args = {
							[1] = game:GetService("Players").LocalPlayer,
							[2] = LureId,
							[3] = "UseBlock",
							[4] = {
								["bait_unique"] = cookie
							},
							[5] = game:GetService("Players").LocalPlayer.Character
						}
						AdoptMeConfigs.RunRouterClient(false, "HousingAPI/ActivateFurniture", args)

						task.wait(1)

						local args2 = {
							[1] = game:GetService("Players").LocalPlayer,
							[2] = LureId,
							[3] = "UseBlock",
							[4] = false,
							[5] = game:GetService("Players").LocalPlayer.Character
						}

						AdoptMeConfigs.RunRouterClient(false, "HousingAPI/ActivateFurniture", args2)
					end
				end)
				task.wait(5)
				AutoLureRunning = false
			end
		end)
	end
end)

Rayfield:LoadConfiguration()
