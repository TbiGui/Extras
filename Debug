local AdoptMeConfigs = {}
AdoptMeConfigs.__index = AdoptMeConfigs

local LocalPlayer = game.Players.LocalPlayer

local getiden = getthreadidentity or getidentity
local setiden = setthreadidentity or setidentity

ClientData = require(game:GetService("ReplicatedStorage").ClientModules.Core.ClientData)
RouterClient = require(game:GetService("ReplicatedStorage").ClientModules.Core.RouterClient.RouterClient)
InteriorsM = require(game:GetService("ReplicatedStorage").ClientModules.Core.InteriorsM.InteriorsM)

function AdoptMeConfigs.getLastSegment(path)
	return string.match(path, ".*/(.*)")
end

function AdoptMeConfigs.isOnlyLetters(text)
	return text:match("^[A-Za-z]+$") ~= nil
end

function AdoptMeConfigs.GetNumberBeforeEqual(text)
	return string.match(text, "^(%d+)")
end

function AdoptMeConfigs.GetIdInBracket(id)
	return string.match(id, "%((.-)%)")
end

function AdoptMeConfigs.isTableEmpty(t)
	return next(t) == nil
end

function AdoptMeConfigs.GetFirstSixLetters(text)
	return string.sub(text, 1, 6)
end

function AdoptMeConfigs.extractName(name)
	local exclamationIndex = string.find(name, "!")
	local doubleColonIndex = string.find(name, "::")
	if exclamationIndex then
		return string.sub(name, 1, exclamationIndex - 1)
	elseif doubleColonIndex then
		return string.sub(name, 1, doubleColonIndex - 1)
	else
		return name
	end
end

function AdoptMeConfigs.NaturalSort(str1, str2)
	local function padNum(num) return ("%09d"):format(tonumber(num) or 0) end
	str1 = str1:gsub("(%d+)", padNum)
	str2 = str2:gsub("(%d+)", padNum)
	return str1 < str2
end

function AdoptMeConfigs.GetPlayerInterior()
	if workspace:FindFirstChild("HouseInteriors").furniture:FindFirstChildWhichIsA("Folder") then
		if string.find(workspace:FindFirstChild("HouseInteriors").furniture:FindFirstChildWhichIsA("Folder").Name, LocalPlayer.Name) or string.find(workspace:FindFirstChild("HouseInteriors").blueprint:FindFirstChildWhichIsA("Model").Name, LocalPlayer.Name) then
			return "House"
		else
			if workspace.Interiors:FindFirstChildWhichIsA("Model") then
				return AdoptMeConfigs.extractName(workspace.Interiors:FindFirstChildWhichIsA("Model").Name)
			else
				return nil
			end
		end
	else
		if workspace.Interiors:FindFirstChildWhichIsA("Model") then
			return AdoptMeConfigs.extractName(workspace.Interiors:FindFirstChildWhichIsA("Model").Name)
		else
			return nil
		end
	end
end

function AdoptMeConfigs.GetPlayersInventory()
	return ClientData.get_data()[LocalPlayer.Name].inventory
end

function AdoptMeConfigs.GetPlayerMoney()
	return ClientData.get_data()[game.Players.LocalPlayer.Name].money
end

function AdoptMeConfigs.GetHouseInterior()
	return ClientData.get_server(game.Players.LocalPlayer,"house_interior").player
end

function AdoptMeConfigs.GetAilmentsManager()
	return ClientData.get_server(LocalPlayer,"ailments_manager")
end

function AdoptMeConfigs.GetCurrentInterior()
	return InteriorsM.get_current_location().destination_id
end

function AdoptMeConfigs.GetPetPetEntityManager()
	return require(game:GetService("ReplicatedStorage").ClientModules.Game.PetEntities.PetEntityManager)
end

function AdoptMeConfigs.InventoryDB()
	return require(game:GetService("ReplicatedStorage").ClientDB.Inventory.InventoryDB)
end

function AdoptMeConfigs.GetCertificate()
	return ClientData.get("subscription_manager").equip_2x_pets.active
end

local Location
for i, v in next, getgc() do
	if type(v) == "function" and islclosure(v) and table.find(getconstants(v), "LocationAPI/SetLocation") then
		Location = v
		break
	end
end

local function SetLocation(A, B, C)
	local old = getiden()
	setiden(2)
	Location(A, B, C)
	setiden(old)
end

local function GetInteriorModel()
	return workspace.Interiors:FindFirstChildWhichIsA("Model")
end

local function Store()
	local storeModel = GetInteriorModel()
	return (storeModel and not storeModel.Name:find("MainMap") and not storeModel.Name:find("Neighborhood")) and storeModel.Name or false
end

local function GetHomeModel()
	return workspace.HouseInteriors.blueprint:FindFirstChildWhichIsA("Model")
end

local function Home()
	local homeModel = GetHomeModel()
	return homeModel and homeModel.Name or false
end

local function MainMap()
	local mapModel = GetInteriorModel()
	return (mapModel and mapModel.Name:find("MainMap")) and mapModel.Name or false
end

local function Neighborhood()
	local neighborhoodModel = GetInteriorModel()
	return (neighborhoodModel and neighborhoodModel.Name:find("Neighborhood")) and neighborhoodModel.Name or false
end

local function TeleportAndWait(LocationName, Door, Params, Condition)
	SetLocation(LocationName, Door, Params)
	return true
end

function AdoptMeConfigs.GoToStore(Name)
	if Store() == Name then return true end
	return TeleportAndWait(Name, "MainDoor", {}, function() return Store() == Name end)
end

function AdoptMeConfigs.GoToMainMap()
	return TeleportAndWait("MainMap", "Neighborhood/MainDoor", {}, MainMap)
end

function AdoptMeConfigs.GoToHome()
	return TeleportAndWait("housing", "MainDoor", {["house_owner"] = LocalPlayer}, Home)
end

function AdoptMeConfigs.GoToNeighborhood()
	return TeleportAndWait("Neighborhood", "MainDoor", {}, Neighborhood)
end

function AdoptMeConfigs.RunRouterClient(IsFire, RouterName, args)
	local old = getiden()
	setiden(2)
	if IsFire then
		if args then
			RouterClient.get(RouterName):FireServer(unpack(args))
		else
			RouterClient.get(RouterName):FireServer()
		end
	else
		if args then
			RouterClient.get(RouterName):InvokeServer(unpack(args))	
		else
			RouterClient.get(RouterName):InvokeServer()	
		end
	end
	setiden(old)
end

function AdoptMeConfigs.PrintDebugMessages(Message, Status)
	if Status then
		print(Message)
	end
end

function AdoptMeConfigs.GetPlayerPotionAmount()
	local NewPlayerMoney = AdoptMeConfigs.GetPlayerMoney()
	local PlayerInv = AdoptMeConfigs.GetPlayersInventory()
	local PlayerInventoryFood = PlayerInv.food
	local NewPlayerAgePotion = 0

	for i,v in pairs(PlayerInventoryFood) do
		if v.kind == "pet_age_potion" then
			NewPlayerAgePotion = NewPlayerAgePotion + 1
		end
	end

	return NewPlayerAgePotion or 0
end

function AdoptMeConfigs.SetPlayerToParent()
	local args = {
		[1] = "Parents",
		[2] = {
			["dont_respawn"] = true,
			["source_for_logging"] = "avatar_editor"
		}
	}

	AdoptMeConfigs.RunRouterClient(false, "TeamAPI/ChooseTeam", args)
end

function AdoptMeConfigs.SetPlayerToBaby()
	local args = {
		[1] = "Babies",
		[2] = {
			["dont_respawn"] = true,
			["source_for_logging"] = "avatar_editor"
		}
	}
	AdoptMeConfigs.RunRouterClient(false, "TeamAPI/ChooseTeam", args)
end

function AdoptMeConfigs.GetFoodToGive(foodidGave)
	local Inventory = AdoptMeConfigs.GetPlayersInventory()
	local food = Inventory.food

	local foodid = ""

	for id,food in pairs(food) do
		if food.id == foodidGave then
			foodid = id
			break
		end
	end

	return foodid
end

function AdoptMeConfigs.GetPlayersPetConfigs(PetUnique)
	local PetConfigs = {
		petKind = "",
		petAge = 1
	}
	
	for i,v in pairs(AdoptMeConfigs.GetPlayersInventory().pets) do
		if i == PetUnique then
			PetConfigs.petKind = v.kind or ""
			PetConfigs.petAge = v.properties.age or 1
			break
		end
	end
	
	return PetConfigs
end

function AdoptMeConfigs.GetPetConfigs(PetKind)
	local PetConfigs = {
		isEgg = false,
	}
	
	for i,v in pairs(AdoptMeConfigs.InventoryDB().pets) do
		if i == PetKind then
			PetConfigs.isEgg = v.is_egg or false
			break
		end
	end
	
	return PetConfigs
end

function AdoptMeConfigs.GetPlayersEquippedPets()
	return ClientData.get_data()[game.Players.LocalPlayer.Name].equip_manager.pets
end

function AdoptMeConfigs.GetCurrentPet(PetUnique)	
	local CurrentPet = {}
	
		for i,v in next, AdoptMeConfigs.GetPetPetEntityManager().get_local_owned_pet_entities() do
			if string.find(v.unique_id, PetUnique, 1, true) then
				CurrentPet = v
				break
			end
		end
	
	return CurrentPet
end

function AdoptMeConfigs.GetAilments(PetUnique1, PetUnique2, BabyUnique, DisabledAilments)
	local Ailments = {
		["FirstPet"] = {},
		["SecondPet"] = {},
		["Baby"] = {},	
	}
	
	local AilmentsManager = AdoptMeConfigs.GetAilmentsManager()
	local PetAilments = AilmentsManager.ailments
	local BabyAilments = AilmentsManager.baby_ailments
	
	if BabyUnique then
		for i,v in pairs(BabyAilments) do
			if DisabledAilments and not table.find(DisabledAilments, v.kind) then
				Ailments.Baby[v.kind] = {}
			end
		end
	end
	
	for i,v in pairs(PetAilments) do
		if not PetUnique1 and not PetUnique2 then
			break
		end
		if i == PetUnique1 then
			for i2,v2 in pairs(v) do
				if DisabledAilments and not table.find(DisabledAilments, v2.kind) then
					Ailments.FirstPet[v2.kind] = {}
				end
			end
			elseif i == PetUnique2 then
			for i2,v2 in pairs(v) do
				if DisabledAilments and not table.find(DisabledAilments, v2.kind) then
					Ailments.SecondPet[v2.kind] = {}
				end
			end
		end
	end
	
	return Ailments
end

function AdoptMeConfigs.EquipPet(PetUnique, AsLast)
	local args = {
		[1] = PetUnique,
		[2] = {
			["equip_as_last"] = AsLast or false,
			["use_sound_delay"] = false
		}
	}
	AdoptMeConfigs.RunRouterClient(false, "ToolAPI/Equip", args)
end

function AdoptMeConfigs.UnequipPet(PetUnique, AsLast)
	local args = {
		[1] = PetUnique,
		[2] = {
			["equip_as_last"] = AsLast or false,
			["use_sound_delay"] = false
		}
	}
	AdoptMeConfigs.RunRouterClient(false, "ToolAPI/Unequip", args)
end

function AdoptMeConfigs.UnequipAllPets()
	for _,v in pairs(AdoptMeConfigs.GetPlayersEquippedPets()) do
		if v.unique then
			AdoptMeConfigs.UnequipPet(v.unique)
		end
	end
end

function AdoptMeConfigs.GetFurniture(Furniture)
		local HouseInteriorsNew = workspace:WaitForChild("HouseInteriors")
		for i,v in pairs(HouseInteriorsNew:WaitForChild("furniture"):GetChildren()) do
			task.wait()
			for i2,v2 in pairs(v:GetChildren()) do
				task.wait() 
				if v2.Name == Furniture then
					return AdoptMeConfigs.getLastSegment(v.Name)
				end
			end
		end
	return false
end

function AdoptMeConfigs.IsEggNotThere(EggUnique)
	local IsEggThere = false
	local Success, Err = pcall(function()
		for i,v in pairs(AdoptMeConfigs.GetPlayersInventory().pets) do
			task.wait()
			if i == EggUnique then
				IsEggThere = true
				break
			else
				IsEggThere = false
			end
		end
	end)

	if not Success then
		warn("Something went wrong while checking if egg is still there: " .. Err)
		return false
	else
		if IsEggThere then
			return false
		else
			return true
		end
	end
end

function AdoptMeConfigs.GetSameKind(PetUnique1, PetUnique2, PetKind)
	for i,v in pairs(AdoptMeConfigs.GetPlayersInventory().pets) do
		if i == PetUnique1 or i == PetUnique2 then
			continue
		end
		
		if v.kind == PetKind then
			return i
		end
	end
end

function AdoptMeConfigs.GetSameAgeKind(PetUnique1, PetKind)
	for i,v in pairs(AdoptMeConfigs.GetPlayersInventory().pets) do
		if i == PetUnique1 then
			continue
		end

		if v.kind == PetKind and v.properties.age < 6 then
			return i
		end
	end
end

function AdoptMeConfigs.GetRandomKind(PetUniqueToSearch, PetUniqueToSkip, PetKindToSearch)
	print(PetUniqueToSearch, PetUniqueToSkip)
	for i,v in pairs(AdoptMeConfigs.GetPlayersInventory().pets) do
		if i == PetUniqueToSearch or i == PetUniqueToSkip then
			continue
		end
		
		local PetConfigs = AdoptMeConfigs.GetPetConfigs(PetKindToSearch)
		local PetToSearch = AdoptMeConfigs.GetPetConfigs(v.kind)
		
		if PetConfigs.isEgg and PetToSearch.isEgg then
			print("Egg", PetConfigs.isEgg, PetToSearch.isEgg, AdoptMeConfigs.GetPlayersPetConfigs(PetUniqueToSearch).petKind, v.kind)
			return i
		elseif not PetConfigs.isEgg and not PetToSearch.isEgg then
			print("Pet", PetConfigs.isEgg, PetToSearch.isEgg, AdoptMeConfigs.GetPlayersPetConfigs(PetUniqueToSearch).petKind, v.kind)
			return i
		end
	end
end

return AdoptMeConfigs
